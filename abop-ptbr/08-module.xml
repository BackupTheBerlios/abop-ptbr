<chapter id="modules">
	<title>Modules</title>
	
	<section id="modules-intro">
		<title>Introduction</title>
		
		<para>
		
		You have seen how you can reuse code in your program by defining functions once. What
		if you wanted to reuse a number of functions in other programs that you write? As you
		might have guessed, the answer is modules. A module is basically a file containing all
		your functions and variables that you have defined. To reuse the module in other programs,
		the filename of the module <emphasis role="bold">must</emphasis> have a
		<filename>.py</filename> extension. 
		
		</para>
		<para>
		
		A module can be <emphasis>imported</emphasis> by another program to make use of its
		functionality. This is how we can use the Python standard library as well. First,
		we will see how to use the standard library modules.
		
		</para>
		
		<section id="using-sys-module">
			<title>Using the sys module</title>
			
			<example>
				<title>Using the sys module</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: using_sys.py

import sys

print 'The command line arguments are:'
for i in sys.argv:
	print i

print '\n\nThe PYTHONPATH is', sys.path, '\n'
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python using_sys.py we are arguments
The command line arguments are:
using_sys.py
we
are
arguments


The PYTHONPATH is ['/home/swaroop/byte/code', '/usr/lib/python23.zip',
'/usr/lib/python2.3', '/usr/lib/python2.3/plat-linux2',
'/usr/lib/python2.3/lib-tk', '/usr/lib/python2.3/lib-dynload',
'/usr/lib/python2.3/site-packages', '/usr/lib/python2.3/site-packages/gtk-2.0']
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				First, we <emphasis>import</emphasis> the <literal>sys</literal> module
				using the <literal>import</literal> statement. Basically, this translates
				to us telling Python that we want to use this module. The
				<literal>sys</literal> module contains functionality related to the Python
				interpreter and its environment.
				
				</para>
				<para>
				
				When Python executes the <literal>import sys</literal> statement, it looks for
				the <filename>sys.py</filename> module in one of the directores listed in its
				<varname>sys.path</varname> variable. If the file is found, then the
				statements in the main block of that module is run and then the module is
				made <emphasis>available</emphasis> for you to use. Note that the
				initialization is done only the <emphasis>first</emphasis> time that we
				import a module. Also, 'sys' is short for 'system'.
				
				</para>
				<para>
				
				The <varname>argv</varname> variable in the <literal>sys</literal> module is
				referred to using the dotted notation - <varname>sys.argv</varname> - one of
				the advantages of this approach is that the name does not clash with any
				<varname>argv</varname> variable used in your program. Also, it indicates
				clearly that this name is part of the <literal>sys</literal> module.
				
				</para>
				<para>
				
				The <varname>sys.argv</varname> variable is a <emphasis>list</emphasis> of
				strings (lists are explained in detail in later
				<link linkend="list">sections</link>). Specifically, the 
				<varname>sys.argv</varname> contains the list of
				<emphasis>command line arguments</emphasis> i.e. the arguments passed to your
				program using the command line.
				
				</para>
				<para>
				
				If you are using an IDE to write and run these programs, look for a way to
				specify command line arguments to the program in the menus.
				
				</para>
				<para>
				
				Here, when we execute <literal>python using_sys.py we are arguments</literal>,
				we run the module <filename>using_sys.py</filename> with the
				<command>python</command> command and the other things that follow are
				arguments passed to the program. Python stores it in the
				<varname>sys.argv</varname> variable for us. 
				
				</para>
				<para>
				
				Remember, the name of the script running is always the first argument in the
				<varname>sys.argv</varname> list. So, in this case we will have
				<literal>'using_sys.py'</literal> as <varname>sys.argv[0]</varname>,
				<literal>'we'</literal> as <varname>sys.argv[1]</varname>,
				<literal>'are'</literal> as <varname>sys.argv[2]</varname> and
				<literal>'arguments'</literal> as <varname>sys.argv[3]</varname> . Notice that
				Python starts counting from 0 and not 1.
				
				</para>
				<para>
				
				The <varname>sys.path</varname> contains the list of directory names where
				modules are imported from. Observe that the first string in
				<varname>sys.path</varname> is empty - this empty string indicates that the
				current directory is also part of the <varname>sys.path</varname> which is
				same as the <envar>PYTHONPATH</envar> environment variable. This means
				that you can directly import modules located in the current directory.
				Otherwise, you will have to place your module in one of the directories
				listed in <varname>sys.path</varname> .
				
				</para>
			</section>
		</section>
	</section>
	<section id="byte-compiled">
		<title>Byte-compiled .pyc files</title>
		
		<para>
		
		Importing a module is a relatively costly affair, so Python does some tricks to make
		it faster. One way is to create <emphasis>byte-compiled</emphasis> files with the extension
		<filename>.pyc</filename> which is related to the intermediate form that Python transforms
		the program into (remember the <link linkend="python-vm">intro section on how Python
		works</link> ?). This <filename>.pyc</filename> file is useful when you import the module the
		next time from a different program - it will be much faster since part of the processing
		required in importing a module is already done. Also, these byte-compiled files are
		platform-independent. So, now you know what those <filename>.pyc</filename> files really are.
		
		</para>
	</section>
	
	<section id="from-import">
		<title>The from..import statement</title>
		
		<para>
		
		If you want to directly import the <varname>argv</varname> variable into your program (to
		avoid typing the <literal>sys.</literal> everytime for it), then you can use the
		<literal>from sys import argv</literal> statement. If you want to import all the names
		used in the <literal>sys</literal> module, then you can use the
		<literal>from sys import *</literal> statement. This works for any module. In general,
		avoid using the <literal>from..import</literal> statement and use the
		<literal>import</literal> statement instead since your program will be much more readable
		and will avoid any name clashes that way.
		
		</para>
	</section>
	<section id="module-name">
		<title>A module's __name__</title>
		
		<para>
		
		Every module has a name and statements in a module can find out the name of its module.
		This is especially handy in one particular situation - As mentioned previously, when a
		module is imported for the first time, the main block in that module is run. What if we
		want to run the block only if the program was used by itself and not when it was
		imported from another module? This can be achieved using the <varname>__name__</varname>
		attribute of the module.
		
		</para>
		
		<section id="using-name">
			<title>Using a module's __name__</title>
			
			<example>
				<title>Using a module's __name__</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: using_name.py

if __name__ == '__main__':
	print 'This program is being run by itself'
else:
	print 'I am being imported from another module'
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python using_name.py
This program is being run by itself

$ python
>>> import using_name
I am being imported from another module
>>>
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				Every Python module has it's <varname>__name__</varname> defined and if this
				is <literal>'__main__'</literal>, it implies that the module is being run
				standalone by the user and we can do corresponding appropriate actions.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="making-modules">
		<title>Making your own Modules</title>
		
		<para>
		
		Creating your own modules is easy, you've been doing it all along! Every Python program
		is also a module. You just have to make sure it has a <filename>.py</filename> extension.
		The following example should make it clear.
		
		</para>
		
		<section id="creating-modules">
			<title>Creating your own Modules</title>
			
			<example>
				<title>How to create your own module</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: mymodule.py

def sayhi():
	print 'Hi, this is mymodule speaking.'

version = '0.1'

# End of mymodule.py
				]]>
				</programlisting>
			</example>
			
			<para>
			
			The above was a sample <emphasis>module</emphasis>. As you can see, there is nothing
			particularly special about compared to our usual Python program. We will next see
			how to use this module in our other Python programs.
			
			</para>
			<para>
			
			Remember that the module should be placed in the same directory as the program that
			we import it in, or the module should be in one of the directories listed in
			<varname>sys.path</varname> .
			
			</para>
			
			<programlisting>
			<![CDATA[
#!/usr/bin/python
# Filename: mymodule_demo.py

import mymodule

mymodule.sayhi()
print 'Version', mymodule.version
			]]>
			</programlisting>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python mymodule_demo.py
Hi, this is mymodule speaking.
Version 0.1
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				Notice that we use the same dotted notation to access members of the
				module. Python makes good reuse of the same notation to give the
				distinctive 'Pythonic' feel to it so that we don't have to keep
				learning new ways to do things.
				
				</para>
			</section>
		</section>
		
		<section id="using-from-import">
			<title>from..import</title>
			
			<para>
			
			Here is a version utilising the <literal>from..import</literal> syntax.
			
			</para>
			<programlisting>
			<![CDATA[
#!/usr/bin/python
# Filename: mymodule_demo2.py

from mymodule import sayhi, version
# Alternative:
# from mymodule import *

sayhi()
print 'Version', version
			]]>
			</programlisting>
			
			<para>
			
			The output of <filename>mymodule_demo2.py</filename> is same as the output of
			<filename>mymodule_demo.py</filename>.
			
			</para>
		</section>
	</section>
	
	<section id="dir">
		<title>The dir() function</title>
		
		<para>
		
		You can use the built-in <function>dir</function> function to list the identifiers
		that a module defines. The identifiers are the functions, classes and variables defined
		in that module.
		
		</para>
		<para>
		
		When you supply a module name to the <function>dir()</function> function, it returns the
		list of the names defined in that module. When no argument is applied to it, it returns
		the list of names defined in the current module.
		
		</para>
		
		<section id="using-dir">
			<title>Using the dir function</title>
			
			<example>
				<title>Using the dir function</title>
				<screen>
				<![CDATA[
$ python
>>> import sys
>>> dir(sys) # get list of attributes for sys module
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',
'__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',
'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',
'copyright', 'displayhook', 'exc_clear', 'exc_info', 'exc_type',
'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval',
'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding',
'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',
'meta_path','modules', 'path', 'path_hooks', 'path_importer_cache',
'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',
'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',
'version', 'version_info', 'warnoptions']
>>> dir() # get list of attributes for current module
['__builtins__', '__doc__', '__name__', 'sys']
>>>
>>> a = 5 # create a new variable 'a'
>>> dir()
['__builtins__', '__doc__', '__name__', 'a', 'sys']
>>>
>>> del a # delete/remove a name
>>>
>>> dir()
['__builtins__', '__doc__', '__name__', 'sys']
>>>
				]]>
				</screen>
			</example>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				First, we see the usage of <function>dir</function> on the imported
				<literal>sys</literal> module. We can see the huge list of attributes
				that it contains.
				
				</para>
				<para>
				
				Next, we use the <function>dir</function> function without passing
				parameters to it - by default, it returns the list of attributes for
				the current module. Notice that the list of imported modules is also
				part of this list.
				
				</para>
				<para>
				
				In order to observe the <function>dir</function> in action, we define
				a new variable <varname>a</varname> and assign it a value and then check
				<function>dir</function> and we observe that there is an additional
				value in the list of the same name. We remove the variable/attribute of
				the current module using the <literal>del</literal> statement and the
				change is reflected again in the output of the <function>dir</function>
				function.
				
				</para>
				<para>
				
				A note on <literal>del</literal> - this statement is used to
				<emphasis>delete</emphasis> a variable/name and after the statement has
				run, in this case <literal>del a</literal>, you can no longer access the
				variable <varname>a</varname> - it is as if it never existed before at all.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="modules-summary">
		<title>Summary</title>
		
		<para>
		
		Modules are useful because they provide services and functionality that you can reuse in
		other programs. The standard library that comes with Python is an example of such a set
		of modules. We have seen how to use these modules and create our own modules as well.
		
		</para>
		<para>
		
		Next, we will learn about some interesting concepts called data structures.
		
		</para>
	</section>
</chapter>
