<chapter id="more-python">
	<title>More Python</title>
	
	<para>
	
	Till now, we have covered majority of the various aspects of Python that you will use.
	In this chapter, we will cover some more aspects that will make our knowledge of Python
	more <emphasis>complete</emphasis>.
	
	</para>
	
	<section id="special-methods">
		<title>Special Methods</title>
		
		<para>
		
		There are certain special methods which have special significance in classes such as
		the <methodname>__init__</methodname> and <methodname>__del__</methodname> methods
		whose significance we have already seen.
		
		</para>
		<para>
		
		Generally, special methods are used to mimic certain behavior. For example, if you want
		to use the <literal>x[key]</literal> indexing operation for your class (just like you use
		for lists and tuples) then just implement the <methodname>__getitem__()</methodname>
		method and your job is done. If you think about it, this is what Python does for the
		<classname>list</classname> class itself!
		
		</para>
		<para>
		
		Some useful special methods are listed in the following table. If you want to know about
		all the special methods, then a huge list is available in the Python Reference Manual.
		
		</para>
		
		<table>
			<title>Some Special Methods</title>
			
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Explanation</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>__init__(self, ...)</entry>
						<entry>
						
						This method is called just before the newly created object
						is returned for usage.
						
						</entry>
					</row>
					<row>
						<entry>__del__(self)</entry>
						<entry>
						
						Called just before the object is destroyed
						
						</entry>
					</row>
					<row>
						<entry>__str__(self)</entry>
						<entry>
						
						Called when we use the <literal>print</literal> statement
						with the object or when <classname>str()</classname> is
						used.
						
						</entry>
					</row>
					<row>
						<entry>__lt__(self, other)</entry>
						<entry>
						
						Called when the <emphasis>less than</emphasis> operator
						( <![CDATA[<]]> ) is used. Similarly, there are special
						methods for all the operators (+, <![CDATA[>]]>, etc.)
						
						</entry>
					</row>
					<row>
						<entry>__getitem__(self, key)</entry>
						<entry>
						
						Called when <literal>x[key]</literal> indexing operation
						is used.
						
						</entry>
					</row>
					<row>
						<entry>__len__(self)</entry>
						<entry>
						
						Called when the built-in <function>len()</function> function
						is used for the sequence object.
						
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section id="single-statement-blocks">
		<title>Single Statement Blocks</title>
		
		<para>
		
		By now, you should have firmly understood that each block of statements is set apart
		from the rest by its own indentation level. Well, this is true for the most part but
		it is not 100% accurate. If your block of statements contains only one single statement,
		then you can specify it on the same line of, say, a conditional statement or looping
		statement. The following example should make this clear:
		
		</para>
		<screen>
		<![CDATA[
>>> flag = True
>>> if flag: print 'Yes'
...
Yes
		]]>
		</screen>
		<para>
		
		As we can see, the single statement is used in-place and not as a separate block.
		Although, you can use this for making your program <emphasis>smaller</emphasis>, I
		<emphasis role="bold">strongly</emphasis> recommend that you do not use this
		short-cut method except for error checking, etc. One major reason is that it will
		be much easier to add an extra statement if you are using proper indentation.
		
		</para>
		<para>
		
		Also notice that when the Python interpreter is used in interactive mode, it helps you
		enter the statements by changing prompts appropriately. In the aboe case, after you entered
		the keyword <literal>if</literal>, it changes the prompt to <literal>...</literal> to
		indicate that the statement is not yet complete. When we do complete the statement in 
		this manner, we press <keycap>enter</keycap> to confirm that the statement is complete.
		Then, Python finishes executing the whole statement and returns to the old prompt waiting
		for the next input.
		
		</para>
	</section>
	
	<section id="list-comprehension">
		<title>List Comprehension</title>
		
		<para>
		
		List comprehensions are used to derive a new list from an existing list. For example, you
		have a list of numbers and you want to get a corresponding list with all the numbers
		multiplied by 2 but only when the number itself is greater than 2. List comprehensions
		are ideal for such situations.
		
		</para>
		
		<section id="using-list-comprehension">
			<title>Using List Comprehensions</title>
			
			<example>
				<title>Using List Comprehensions</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: list_comprehension.py

listone = [2, 3, 4]
listtwo = [2*i for i in listone if i > 2]
print listtwo
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python list_comprehension.py
[6, 8]
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				Here, we derive a new list by specifying the manipulation to be done
				(<literal>2*i</literal>) when some condition is satisfied
				(<literal><![CDATA[if i > 2]]></literal>). Note that the original list
				remains unmodified. Many a time, we use loops to process each element of
				a list, the same can be achieved using list comprehensions in a more
				precise, compact and explicit manner.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="tuples-lists-functions">
		<title>Receiving Tuples and Lists in Functions</title>
		
		<para>
		
		There is a special way of receiving parameters to a function as a tuple or a dictionary
		using the <literal>*</literal> or <literal>**</literal> prefix respectively. This is
		useful when taking variable number of arguments in the function.
		
		</para>
		<screen>
		<![CDATA[
>>> def powersum(power, *args):
...     '''Return the sum of each argument raised to specified power.'''
...     total = 0
...     for i in args:
...             total += pow(i, power)
...     return total
...
>>> powersum(2, 3, 4)
25

>>> powersum(2, 10)
100
		]]>
		</screen>
		
		<para>
		
		Due to the <literal>*</literal> prefix on the <varname>args</varname> variable, all
		extra arguments passed to the function are stored in <varname>args</varname> as a tuple.
		If a <literal>**</literal> prefix had been used instead, the extra parameters would be
		considered to be key/value pairs of a dictionary.
		
		</para>
	</section>
	
	<section id="lambda-forms">
		<title>Lambda Forms</title>
		
		<para>
		
		A <literal>lambda</literal> statement is used to create new function objects and then
		return them at runtime.
		
		</para>
		
		<section id="using-lambda-forms">
			<title>Using Lambda Forms</title>
			
			<example>
				<title>Using Lambda Forms</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: lambda.py

def make_repeater(n):
	return lambda s: s * n

twice = make_repeater(2)

print twice('word')
print twice(5)
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python lambda.py
wordword
10
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				Here, we use a function <function>make_repeater</function> to create new
				function objects at runtime and return it. A <literal>lambda</literal>
				statement is used to create the function object. Essentially, the
				<literal>lambda</literal> takes a parameter followed by a single expression
				only which becomes the body of the function and the value of this
				expression is returned by the new function. Note that even a
				<literal>print</literal> statement cannot be used inside a lambda form,
				only expressions.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="exec-statement">
		<title>The exec and eval statements</title>
		
		<para>
		
		The <literal>exec</literal> statement is used to execute Python statements which are
		stored in a string or file. For example, we can generate a string containing Python code
		at runtime and then execute these statements using the <literal>exec</literal> statement.
		A simple example is shown below.
		
		</para>
		<screen>
		<![CDATA[
>>> exec 'print "Hello World"'
Hello World
		]]>
		</screen>
		
		<para>
		
		The <literal>eval</literal> statement is used to evaluate valid Python expressions
		which are stored in a string. A simple example is shown below.
		
		</para>
		<screen>
		<![CDATA[
>>> eval('2*3')
6
		]]>
		</screen>
	</section>
	
	<section id="assert-statement">
		<title>The assert statement</title>
		
		<para>
		
		The <literal>assert</literal> statement is used to assert that something is true. For
		example, if you are very sure that you will have at least one element in a list you are
		using and want to check this, and raise an error if it is not true, then
		<literal>assert</literal> statement is ideal in this situation. When the assert
		statement fails, an <classname>AssertionError</classname> is raised.
		
		</para>
		<screen>
		<![CDATA[
>>> mylist = ['item']
>>> assert len(mylist) >= 1
>>> mylist.pop()
'item'
>>> assert len(mylist) >= 1
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
AssertionError
		]]>
		</screen>
	</section>
	
	<section id="repr-function">
		<title>The repr function</title>
		
		<para>
		
		The <function>reprt</function> function is used to obtain a canonical string
		representation of the object. Backticks (also called conversion or reverse quotes) do
		the same thing. Note that you will have <literal>eval(repr(object)) == object</literal>
		most of the time.
		
		</para>
		<screen>
		<![CDATA[
>>> i = []
>>> i.append('item')
>>> `i`
"['item']"
>>> repr(i)
"['item']"
		]]>
		</screen>
		
		<para>
		
		Basically, the <function>repr</function> function or the backticks are used to obtain
		a printable representation of the object. you can control what your objects return
		for the <function>repr</function> function by defining the <methodname>__repr__</methodname>
		method in your class.
		
		</para>
	</section>
	
	<section id="more-python-summary">
		<title>Summary</title>
		
		<para>
		
		We have covered some more features of Python in this chapter and yet you can be sure we
		haven't covered all the features of Python. However, at this stage, we have covered most
		of what you are ever going to use in practice. This is sufficient for you to get
		started with whatever programs you are going to create.
		
		</para>
		<para>
		
		Next, we will discuss how to explore Python further.
		
		</para>
	</section>
</chapter>