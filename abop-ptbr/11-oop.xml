<chapter id="oops">
	<title>Object-Oriented Programming</title>
	
	<section id="oops-intro">
		<title>Introduction</title>
		
		<para>
		
		In all our programs till now, we have designed our program around functions or blocks
		of statements which manipulate data. This is called the <emphasis>procedure-oriented</emphasis>
		way of programming. There is another way of organizing your program which is to combine
		data and functionality and wrap it inside what is called an object. This is called the
		<emphasis>object oriented</emphasis> programming paradigm. Most of the time you can use
		procedural programming but sometimes when you want to write large programs or have a solution
		that is better suited to it, you can use object oriented programming techniques.
		
		</para>
		<para>
		
		Classes and objects are the two main aspecs of object oriented programming.
		A  <emphasis role="bold">class</emphasis> creates a new <emphasis>type</emphasis> where
		<emphasis role="bold">objects</emphasis> are <emphasis>instances</emphasis> of the class.
		An analogy is that you can have variables of type <classname>int</classname> which
		translates to saying that variables that store integers are variables which are instances
		(objects) of the <classname>int</classname> class.
		
		</para>
		<note>
			<title>Note for C/C++/Java/C# Programmers</title>
			
			<para>
			
			Note that even integers are treated as objects (of the <classname>int</classname> class).
			This is unlike C++ and Java (before version 1.5) where integers are primitive native
			types. See <literal>help(int)</literal> for more details on the class.
			
			</para>
			<para>
			
			C# and Java 1.5 programmers will be familiar with this concept since it is similar
			to the <emphasis>boxing and unboxing</emphasis> concept.
			
			</para>
		</note>
		
		<para>
		
		Objects can store data using ordinary variables that <emphasis>belong</emphasis> to the
		object. Variables that belong to an object or class are called as
		<emphasis role="bold">fields</emphasis>. Objects can also have functionality by using
		functions that <emphasis>belong</emphasis> to a class. Such functions are called
		<emphasis role="bold">methods</emphasis> of the class. This terminology is important
		because it helps us to differentiate between functions and variables which are separate
		by itself and those which belong to a class or object. Collectively, the fields and
		methods can be referred to as the <emphasis role="bold">attributes</emphasis> of that class.
		
		</para>
		<para>
		
		Fields are of two types - they can belong to each instance/object of the class or they can
		belong to the class itself. They are called <emphasis role="bold">instance variables</emphasis>
		and <emphasis role="bold">class variables</emphasis> respectively.
		
		</para>
		<para>
		
		A class is created using the <literal>class</literal> keyword. The fields and methods of the
		class are listed in an indented block.
		
		</para>
	</section>
	<section id="self">
		<title>The self</title>
		
		<para>
		
		Class methods have only one specific difference from ordinary functions - they must have
		an extra first name that has to be added to the beginning of the parameter list, but you
		do <emphasis role="bold">do not</emphasis> give a value for this parameter when you call
		the method, Python will provide it. This particular variable refers to the object itself,
		and by convention, it is given the name <literal>self</literal>.
		
		</para>
		<para>
		
		Although, you can give any name for this parameter, it is <emphasis>strongly
		recommended</emphasis> that you use the name <literal>self</literal> - any other name is
		definitely frowned upon. There are many advantages to using a standard name - any reader
		of your program will immediately recognize it and even specialized <abbrev>IDEs</abbrev>
		(Integrated Development Environments) can help you if you use <literal>self</literal>.
		
		</para>
		<note>
			<title>Note for C++/Java/C# Programmers</title>
			
			<para>
			
			The <literal>self</literal> in Python is equivalent to the <literal>self</literal>
			pointer in C++ and the <literal>this</literal> reference in Java and C#.
			
			</para>
		</note>
		
		<para>
		
		You must be wondering how Python gives the value for <literal>self</literal> and why you
		don't need to give a value for it. An example will make this clear. Say you have a class
		called <classname>MyClass</classname> and an instance of this class called
		<varname>MyObject</varname>. When you call a method of this object as
		<literal>MyObject.method(arg1, arg2)</literal>, this is automatically converted by Python
		into <literal>MyClass.method(MyObject, arg1, arg2</literal> - this is what the special
		<literal>self</literal> is all about.
		
		</para>
		<para>
		
		This also means that if you have a method which takes no arguments, then you still have
		to define the method to have a <literal>self</literal> argument.
		
		</para>
	</section>
	
	<section id="classes">
		<title>Classes</title>
		
		<para>
		
		The simplest class possible is shown in the following example.
		
		</para>
		
		<section id="creating-class">
			<title>Creating a Class</title>
			
			<example>
				<title>Creating a Class</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: simplestclass.py

class Person:
	pass # An empty block

p = Person()
print p
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python simplestclass.py
<__main__.Person instance at 0xf6fcb18c>
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				We create a new class using the <literal>class</literal> statement followed
				by the name of the class. This follows an indented block of statements
				which form the body of the class. In this case, we have an empty block
				which is indicated using the <literal>pass</literal> statement.
				
				</para>
				<para>
				
				Next, we create an object/instance of this class using the name of the
				class followed by a pair of parentheses. (We will learn
				<link linkend="class-init">more about instantiation</link> in the next
				section). For our verification, we confirm the type of the variable
				by simply printing it. It tells us that we have an instance of the
				<classname>Person</classname> class in the <literal>__main__</literal>
				module.
				
				</para>
				<para>
				
				Notice that the address of the computer memory where your object is stored
				is also printed. The address will have a different value on your computer
				since Python can store the object wherever it finds space.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="object-methods">
		<title>object Methods</title>
		
		<para>
		
		We have already discussed that classes/objects can have methods just like functions except
		that we have an extra <literal>self</literal> variable. We will now see an example.
		
		</para>
		
		<section id="using-object-methods">
			<title>Using Object Methds</title>
			
			<example>
				<title>Using Object Methods</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: method.py

class Person:
	def sayHi(self):
		print 'Hello, how are you?'

p = Person()
p.sayHi()

# This short example can also be written as Person().sayHi()
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python method.py
Hello, how are you?
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				Here we see the <literal>self</literal> in action. Notice that the
				<function>sayHi</function> method takes no parameters but still has the
				<literal>self</literal> in the function definition.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="class-init">
		<title>The __init__ method</title>
		
		<para>
		
		There are many method names which have special significance in Python classes. We will
		see the significance of the <methodname>__init__</methodname> method now.
		
		</para>
		<para>
		
		The <methodname>__init__</methodname> method is run as soon as an object of a class is
		instantiated. The method is useful to do any <emphasis>initialization</emphasis> you want
		to do with your object. Notice the double underscore both in the beginning and at the end
		in the name.
		
		</para>
		
		<section id="using-class-init">
			<title>Using the __init__ method</title>
			
			<example>
				<title>Using the __init__ method</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: class_init.py

class Person:
	def __init__(self, name):
		self.name = name
	def sayHi(self):
		print 'Hello, my name is', self.name

p = Person('Swaroop')
p.sayHi()

# This short example can also be written as Person('Swaroop').sayHi()
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python class_init.py
Hello, my name is Swaroop
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				Here, we define the <methodname>__init__</methodname> method as taking a
				parameter <varname>name</varname> (along with the usual <varname>self</varname>).
				Here, we just create a new field also called <literal>name</literal>. Notice
				these are two different variables even though they have the same name. The
				dotted notation allows us to differentiate between them.
				
				</para>
				<para>
				
				Most importantly, notice that we do not explicitly call the
				<methodname>__init__</methodname> method but pass the arguments in the
				parentheses following the class name when creating a new instance of the
				class. This is the special significance of this method.
				
				</para>
				<para>
				
				Now, we are able to use the <varname>self.name</varname> field in our
				methods which is demonstrated in the <methodname>sayHi</methodname> method.
				
				</para>
			</section>
			
			<note>
				<title>Note for C++/Java/C# Programmers</title>
				
				<para>
				
				The <methodname>__init__</methodname> method is analogous to a
				<emphasis>constructor</emphasis> in C++, C# or Java.
				
				</para>
			</note>
		</section>
	</section>
	
	<section id="class-and-object-vars">
		<title>Class and Object Variables</title>
		
		<para>
		
		We have already discussed the functionality part of classes and objects, now we'll see the
		data part of it. Actually, they are nothing but ordinary variables which are
		<emphasis>bound</emphasis> to the classes and objects <emphasis role="bold">namespaces</emphasis>
		i.e. the names are valid within the context of these classes and objects only.
		
		</para>
		<para>
		
		There are two types of <emphasis>fields</emphasis> - class variables and object variables
		which are classified depending on whether the class or the object <emphasis>owns</emphasis>
		the variables respectively.
		
		</para>
		<para>
		
		<emphasis>Class variables</emphasis> are shared in the sense that they are accessed by all
		objects (instances) of that class. There is only copy of the class variable and when any one
		object makes a change to a class variable, the change is reflected in all the other instances
		as well.
		
		</para>
		<para>
		
		<emphasis>Object variables</emphasis> are owned by each individual object/instance of the
		class. In this case, each object has its own copy of the field i.e. they are not shared
		and are not related in any way to the field by the samen name in a different instance of
		the same class. An example will make this easy to understand.
		
		</para>
		
		<section id="using-class-and-obj-vars">
			<title>Using Class and Object Variables</title>
			
			<example>
				<title>Using Class and Object Variables</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: objvar.py

class Person:
	'''Represents a person.'''
	population = 0

	def __init__(self, name):
		'''Initializes the person's data.'''
		self.name = name
		print '(Initializing %s)' % self.name

		# When this person is created, he/she
		# adds to the population
		Person.population += 1
	
	def __del__(self):
		'''I am dying.'''
		print '%s says bye.' % self.name

		Person.population -= 1

		if Person.population == 0:
			print 'I am the last one.'
		else:
			print 'There are still %d people left.' % Person.population
	
	def sayHi(self):
		'''Greeting by the person.
		
		Really, that's all it does.'''
		print 'Hi, my name is %s.' % self.name
	
	def howMany(self):
		'''Prints the current population.'''
		if Person.population == 1:
			print 'I am the only person here.'
		else:
			print 'We have %d persons here.' % Person.population

swaroop = Person('Swaroop')
swaroop.sayHi()
swaroop.howMany()

kalam = Person('Abdul Kalam')
kalam.sayHi()
kalam.howMany()

swaroop.sayHi()
swaroop.howMany()
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python objvar.py
(Initializing Swaroop)
Hi, my name is Swaroop.
I am the only person here.
(Initializing Abdul Kalam)
Hi, my name is Abdul Kalam.
We have 2 persons here.
Hi, my name is Swaroop.
We have 2 persons here.
Abdul Kalam says bye.
There are still 1 people left.
Swaroop says bye.
I am the last one.
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				This is a long example but helps demonstrate the nature of class and
				object variables. Here, <varname>population</varname> belongs to the
				<classname>Person</classname> class and hence is a class variable.
				The <varname>name</varname> variable belongs to the object (it is
				assigned using <literal>self</literal>) and hence is an object variable.
				
				</para>
				<para>
				
				Thus, we refer to the <varname>population</varname> class variable as
				<varname>Person.population</varname> and not as
				<varname>self.population</varname>. Note that an object variable with
				the same name as a class variable will hide the class variable!
				We refer to the object variable <varname>name</varname> using
				<varname>self.name</varname> notation in the methods of that object.
				Remember this simple difference between class and object variables.
				
				</para>
				<para>
				
				Observe that the <methodname>__init__</methodname> method is used to
				initialize the <classname>Person</classname> instance with a name.
				In this method, we increase the <varname>population</varname> count by
				1 since we have one more person being added. Also observe that the values
				of <varname>self.name</varname> is specific to each object which
				indicates the nature of object variables.
				
				</para>
				<para>
				
				Remember, that you must refer to the variables and methods of the same
				object using the <varname>self</varname> variable
				<emphasis role="bold">only</emphasis>. This is called an
				<emphasis>attribute reference</emphasis>.
				
				</para>
				<para>
				
				In this program, we also see the use of
				<emphasis role="bold">docstrings</emphasis> for classes as well as methods.
				We can access the class docstring at runtime using
				<varname>Person.__doc__</varname> and the method docstring as
				<varname>Person.sayHi.__doc__</varname>
				
				</para>
				<para>
				
				Just like the <methodname>__init__</methodname> method, there is another
				special method <methodname>__del__</methodname> which is called when an
				object is going to die i.e. it is no longer being used and is being returned
				to the system for reusing that piece of memory. In this method, we simply
				decrease the <varname>Person.population</varname> count by 1.
				
				</para>
				<para>
				
				The <methodname>__del__</methodname> method is run when the object is no longer
				in use and there is no guarantee <emphasis>when</emphasis> that method will
				be run. If you want to explicitly do this, you just have to use the
				<literal>del</literal> statement which we have used in previous examples.
				
				</para>
				
				<note>
					<title>Note for C++/Java/C# Programmers</title>
					
					<para>
					
					All class members (including the data members) are
					<emphasis>public</emphasis> and all the methods are
					<emphasis>virtual</emphasis> in Python.
					
					</para>
					<para>
					
					One exception: If you use data members with names using the
					<emphasis>double underscore prefix</emphasis> such as
					<varname>__privatevar</varname>, Python uses name-mangling to
					effectively make it a private variable.
					
					</para>
					<para>
					
					Thus, the convention followed is that any variable that is to be
					used only within the class or object should begin with an
					underscore and all other names are public and can be used by other
					classes/objects. Remember that this is only a convention and is not
					enforced by Python (except for the double underscore prefix).
					
					</para>
					
					<para>
					
					Also, note that the <methodname>__del__</methodname> method is
					analogous to the concept of a <emphasis>destructor</emphasis>.
					
					</para>
				</note>
			</section>
		</section>
	</section>
	<section id="inheritance">
		<title>Inheritance</title>
		
		<para>
		
		One of the major benefits of object oriented programming is
		<emphasis role="bold">reuse</emphasis> of code and one of the ways this is achieved is
		through the <emphasis>inheritance</emphasis> mechanism. Inheritance can be best imagined as
		implementing a <emphasis>type and subtype</emphasis> relationship between classes.
		
		</para>
		<para>
		
		Suppose you want to write a program which has to keep track of the teachers and students in
		a college. They have some common characteristics such as name, age and address. They also
		have specific characteristics such as salary, courses and leaves for teachers and,
		marks and fees for students.
		
		</para>
		<para>
		
		You can create two independent classes for each type and process them but adding a new
		common characteristic would mean adding to both of these independent classes. This quickly
		becomes unwieldy.
		
		</para>
		<para>
		
		A better way would be to create a common class called <classname>SchoolMember</classname>
		and then have the teacher and student classes <emphasis>inherit</emphasis> from this
		class i.e. they will become sub-types of this type (class) and then we can add specific
		characteristics to these sub-types.
		
		</para>
		<para>
		
		There are many advantages to this approach. If we add/change any functionality in
		<classname>SchoolMember</classname>, this is automatically reflected in the subtypes as
		well. For example, you can add a new ID card field for both teachers and students by simply
		adding it to the SchoolMember class. However, changes in the subtypes do not affect other
		subtypes. Another advantage is that if you can refer to a teacher or student object as a
		<classname>SchoolMember</classname> object which could be useful in some situations such as
		counting of the number of school members. This is called
		<emphasis role="bold">polymorphism</emphasis> where a sub-type can be substituted in any
		situation where a parent type is expected i.e. the object can be treated as an instance of
		the parent class.
		
		</para>
		<para>
		
		Also observe that we <emphasis>reuse</emphasis> the code of the parent class and we do not
		need to repeat it in the different classes as we would have had to in case we had used
		independent classes.
		
		</para>
		<para>
		
		The <classname>SchoolMember</classname> class in this situation is known as the
		<emphasis>base class</emphasis> or the <emphasis>superclass</emphasis>. The
		<classname>Teacher</classname> and <classname>Student</classname> classes are called the
		<emphasis>derived classes</emphasis> or <emphasis>subclasses</emphasis>.
		
		</para>
		<para>
		
		We will now see this example as a program.
		
		</para>
		<section id="using-inheritance">
			<title>Using Inheritance</title>
			
			<example>
				<title>Using Inheritance</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: inherit.py

class SchoolMember:
	'''Represents any school member.'''
	def __init__(self, name, age):
		self.name = name
		self.age = age
		print '(Initialized SchoolMember: %s)' % self.name
	
	def tell(self):
		'''Tell my details.'''
		print 'Name:"%s" Age:"%s"' % (self.name, self.age),

class Teacher(SchoolMember):
	'''Represents a teacher.'''
	def __init__(self, name, age, salary):
		SchoolMember.__init__(self, name, age)
		self.salary = salary
		print '(Initialized Teacher: %s)' % self.name

	def tell(self):
		SchoolMember.tell(self)
		print 'Salary: "%d"' % self.salary

class Student(SchoolMember):
	'''Represents a student.'''
	def __init__(self, name, age, marks):
		SchoolMember.__init__(self, name, age)
		self.marks = marks
		print '(Initialized Student: %s)' % self.name
	
	def tell(self):
		SchoolMember.tell(self)
		print 'Marks: "%d"' % self.marks

t = Teacher('Mrs. Shrividya', 40, 30000)
s = Student('Swaroop', 22, 75)

print # prints a blank line

members = [t, s]
for member in members:
	member.tell() # works for both Teachers and Students
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python inherit.py
(Initialized SchoolMember: Mrs. Shrividya)
(Initialized Teacher: Mrs. Shrividya)
(Initialized SchoolMember: Swaroop)
(Initialized Student: Swaroop)

Name:"Mrs. Shrividya" Age:"40" Salary: "30000"
Name:"Swaroop" Age:"22" Marks: "75"
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				To use inheritance, we specify the base class names in a tuple following
				the class name in the class definition. Next, we observe that the
				<methodname>__init__</methodname> method of the base class is explicitly
				called using the <varname>self</varname> variable so that we can initialize
				the base class part of the object. This is very important to remember -
				Python does not automatically call the constructor of the base class, you
				have to explicitly call it yourself.
				
				</para>
				<para>
				
				We also observe that we can call methods of the base class by prefixing
				the class name to the method call and then pass in the
				<varname>self</varname> variable along with any arguments.
				
				</para>
				<para>
				
				Notice that we can treat instances of <classname>Teacher</classname> or
				<classname>Student</classname> as just instances of the
				<classname>SchoolMember</classname> when we use the
				<methodname>tell</methodname> method of the <classname>SchoolMember</classname>
				class.
				
				</para>
				<para>
				
				Also, observe that the <methodname>tell</methodname> method of the
				subtype is called and not the <methodname>tell</methodname> method of the
				<classname>SchoolMember</classname> class. One way to understand this is that
				Python <emphasis>always</emphasis> starts looking for methods in the type, which
				in this case it does. If it could not find the method, it starts looking at the
				methods belonging to its base classes one by one in the order they are specified
				in the tuple in the class definition.
				
				</para>
				<para>
				
				A note on terminology - if more than one class is listed in the inheritance
				tuple, then it is called <emphasis>multiple inheritance</emphasis>.
				
				</para>
			</section>
		</section>
	</section>
	
	<section id="oops-summary">
		<title>Summary</title>
		
		<para>
		
		We have now explored the various aspects of classes and objects as well as the various
		terminologies associated with it. We have also seen the benefits and pitfalls of
		object-oriented programming. Python is highly object-oriented and understanding these
		concepts carefully will help you a lot in the long run.
		
		</para>
		<para>
		
		Next, we will learn how to deal with input/output and how to access files in Python.
		
		</para>
	</section>
</chapter>