<chapter id="basics">
	<title>The Basics</title>

	<para>
	
	Just printing 'Hello World' is not enough, is it? You want to do more than that - you
	want to take some input, manipulate it and get something out of it. We can achieve this
	in Python using constants and variables.
	
	</para>
	
	<section id="literal-constants">
		<title>Literal Constants</title>
		
		<para>
		
		An example of a literal constant is a number like <literal>5</literal>,
		<literal>1.23</literal>, <literal>9.25e-3</literal> or a string like
		<literal>'This is a string'</literal> or <literal><![CDATA["It's a string!"]]></literal>.
		It is called a literal because it is <emphasis>literal</emphasis> - you use its value
		literally. The number <literal>2</literal> always represents itself and nothing else - it
		is a constant because its value cannot be changed. Hence, all these are referred to as
		literal constants.
		
		</para>
	</section>
	<section id="numbers">
		<title>Numbers</title>
		
		<para>
		
		Numbers in Python are of four types - integers, long integers, floating point and complex
		numbers.
		
		</para>
		<itemizedlist>
			<listitem>
				<para>
				
				Examples of integers are <literal>2</literal> which are just whole numbers.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				Long integers are just bigger whole numbers.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				Examples of floating point numbers (or <emphasis>floats</emphasis>
				for short) are <literal>3.23</literal> and <literal>52.3E-4</literal>.
				The <literal>E</literal> notation indicates powers of 10. In this case,
				<literal>52.3E-4</literal> means
				<literal>52.3 * 10<superscript>-4</superscript></literal>.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				Examples of complex numbers are <literal>(-5+4j)</literal> and
				<literal>(2.3 - 4.6j)</literal>
				
				</para>
			</listitem>
		</itemizedlist>
	</section>
	<section id="strings">
		<title>Strings</title>
		<para>
		
		A string is a <emphasis>sequence</emphasis> of <emphasis>characters</emphasis>. Strings
		are basically just a bunch of words.
		
		</para>
		<para>
		
		I can almost guarantee that you will be using strings in almost every Python program that
		you write, so pay attention to the following part. Here's how you use strings in Python:
		
		</para>
		<itemizedlist>
			<listitem>
				<bridgehead renderas="sect5">Using Single Quotes (<literal>'</literal>)</bridgehead>
				<para>
				
				You can specify strings using single quotes such as
				<literal>'Quote me on this'</literal> . All white space i.e. spaces and
				tabs are preserved as-is.
				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Using Double Quotes (<literal><![CDATA["]]></literal>)</bridgehead>
				<para>
				
				Strings in double quotes work exactly the same way as strings in single
				quotes. An example is
				<literal><![CDATA["What's your name?"]]></literal>
				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Using Triple Quotes (<literal>'''</literal> or <literal><![CDATA["""]]></literal>)</bridgehead>
				<para>
				
				You can specify multi-line strings using triple quotes. You can use single
				quotes and double quotes freely within the triple quotes. An example is
				
				</para>
				<programlisting>
				<![CDATA[
'''This is a multi-line string. This is the first line.
This is the second line.
"What's your name?," I asked.
He said "Bond, James Bond."
'''
				]]>
				</programlisting>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Escape Sequences</bridgehead>
				<para>
				
				Suppose, you want to have a string which contains a single quote
				(<literal>'</literal>), how will you specify this string? For example,
				the string is <literal>What's your name?</literal>. You cannot specify
				<literal>'What's your name?'</literal> because Python will be confused
				as to where the string starts and ends. So, you will have to specify
				that this single quote does not indicate the end of the string. This can
				be done with the help of what is called an <emphasis>escape
				sequence</emphasis>. You specify the single quote as <literal>\'</literal>
				- notice the backslash. Now, you can specify the string as
				<literal>'What\'s your name?'</literal>.
				
				</para>
				<para>
				
				Another way of specifying this specific string would be
				<literal>"What's your name?"</literal> i.e. using double quotes. Similarly,
				you have to use an escape sequence forusing a double quote itself in a
				double quoted string. Also, you have to indicate the backslash itself using
				the escape sequence <literal>\\</literal>.
				
				</para>
				<para>
				
				What if you wanted to specify a two-line string? One way is to use a
				triple-quoted string as shown above or you can use an escape sequence for
				the newline character - <literal>\n</literal> to indicate the start of a
				new line. An example is <literal>This is the first line\nThis is the
				second line</literal> . Another useful escape sequence to know is the tab
				- <literal>\t</literal>. There are many more escape sequences but I have
				mentioned only the most useful ones here.
				
				</para>
				<para>
				
				One thing to note is that in a string, a single backslash at the end of
				the line indicates that the string is continued in the next line, but
				no newline is added. For example,
				
				</para>
				<programlisting>
				<![CDATA[
"This is the first sentence.\
This is the second sentence."
				]]>
				</programlisting>
				<para>
				
				is equivalent to <literal><![CDATA["This is the first sentence. This is the second sentence."]]></literal>
				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Raw Strings</bridgehead>
				<para>
				
				If you need to specify some strings where no special processing such as
				escape sequences are handled, then what you need is to specify a
				<emphasis>raw</emphasis> string by prefixing <literal>r</literal> or
				<literal>R</literal> to the string. An example is
				<literal>r"Newlines are indicated by \n"</literal>.
				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Unicode Strings</bridgehead>
				<para>
				
				Unicode is a standard way of writing international text. If you want to
				write text in your native language such as Hindi or Arabic, then you need
				to have a Unicode-enabled text editor. Similarly, Python allows you to
				handle Unicode text - all you need to do is prefix <literal>u</literal>
				or <literal>U</literal>. For example,
				<literal><![CDATA[u"This is a Unicode string."]]></literal>.
				
				</para>
				<para>
				
				Remember to use Unicode strings when you are dealing with text files,
				especially when you know that the file will contain text written in
				languages other than English.
				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Strings are immutable</bridgehead>
				<para>
				
				This means that once you have created a string, you cannot change it.
				Although this might seem like a bad thing, it really isn't. We will see
				why this is not a limitation in the various programs that we see later on.
				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">String literal concatenation</bridgehead>
				<para>
				
				If you place two string literals side by side, they are automatically
				concatenated by Python. For example, <literal>'What\'s' 'your name?'</literal>
				is automatically converted in to <literal><![CDATA["What's your name?"]]></literal>.
				
				</para>
			</listitem>
		</itemizedlist>
		<note>
			<title>Note for C/C++ Programmers</title>
			<para>
			
			There is no separate <classname>char</classname> data type in Python. There is
			no real need for it and I am sure you won't miss it.
			
			</para>
		</note>
		<note>
			<title>Note for Perl/PHP Programmers</title>
			<para>
			
			Remember that single-quoted strings and double-quoted strings are the same - they
			do not differ in any way.
			
			</para>
		</note>
		<note>
			<title>Note for Regular Expression Users</title>
			<para>
			
			Always use raw strings when dealing with regular expressions. Otherwise, a lot of
			backwhacking may be required. For example, backreferences can be referred to as
			<literal>'\\1'</literal> or <literal>r'\1'</literal>.
			
			</para>
		</note>
	</section>
	<section id="variables">
		<title>Variables</title>
		<para>
		
		Using just literal constants can soon become boring - we need some way of storing any
		information and manipulate them as well. This is where <emphasis>variables</emphasis>
		come into the picture. Variables are exactly what they mean - their value can vary i.e.
		you can store anything using a variable. Variables are just parts of your computer's
		memory where you store some information. Unlike literal constants, you need some method
		of accessing these variables and hence you give them names.
		
		</para>
	</section>
	<section id="identifier">
		<title>Identifier Naming</title>
		
		<para>
		
		Variables are examples of identifiers. <emphasis>Identifiers</emphasis> are names given
		to identify <emphasis>something</emphasis>. There are some rules you have to follow for
		naming identifiers:
		
		</para>
		
		<itemizedlist>
			<listitem>
				<para>
				
				The first character of the identifier must be a letter of the alphabet
				(upper or lowercase) or an underscore ('_').
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The rest of the identifier name can consist of letters (upper or lowercase),
				underscores ('_') or digits (0-9).
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				Identifier names are case-sensitive. For example, <literal>myname</literal>
				and <literal>myName</literal> are <emphasis role="bold">not</emphasis> the
				same. Note the lowercase <literal>n</literal> in the former and the
				uppercase <literal>N</literal> in te latter.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				Examples of <emphasis>valid</emphasis> identifier names are
				<literal>i</literal>, <literal>__my_name</literal>, <literal>name_23</literal>
				and <literal>a1b2_c3</literal>.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				Examples of <emphasis>invalid</emphasis> identifier names are
				<literal>2things</literal>, <literal>this is spaced out</literal>
				and <literal>my-name</literal>.
				
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section id="data-types">
		<title>Data Types</title>
		
		<para>
		
		Variables can hold values of different types called <emphasis role="bold">data
		types</emphasis>. The basic types are numbers and strings, which we have already
		discussed. In later chapters, we will see how to create our own types using
		<link linkend="oops">classes</link>.
		
		</para>
	</section>
	<section id="data-type-object">
		<title>Objects</title>
		<para>
		
		Remember, Python refers to anything used in a program as an <emphasis>object</emphasis>.
		This is meant in the generic sense. Instead of saying 'the <emphasis>something</emphasis>',
		we say 'the <emphasis>object</emphasis>'.
		
		</para>
		
		<note>
			<title>Note for Object Oriented Programming users</title>
			<para>
			
			Python is strongly object-oriented in the sense that everything is an object
			including numbers, strings and even functions.
			
			</para>
		</note>
		
		<para>
		
		We will now see how to use variables along with literal constants. Save the following
		example and run the program.
		
		</para>
		
		<note>
			<title>How to write Python programs</title>
			<para>
			
			Henceforth, the standard procedure to save and run a Python program is as follows:
			
			</para>
			
			<procedure>
				<step>
					<para>
					
					Open your favorite editor.
					
					</para>
				</step>
				<step>
					<para>
					
					Enter the program code given in the example.
					
					</para>
				</step>
				<step>
					<para>
					
					Save it as a file with the filename mentioned in the comment.
					I follow the convention of having all Python programs saved with
					the extension <literal>.py</literal>.
					
					</para>
				</step>
				<step>
					<para>
					
					Run the interpreter with the command
					<command>python <replaceable>program.py</replaceable></command> or
					use IDLE to run the programs. You can also use the
					<link linkend="executable-python-programs">executable method</link>
					as explained earlier.
					
					</para>
				</step>
			</procedure>
		</note>
		
		<example>
			<title>Using Variables and Literal constants</title>
			<programlisting>
			<![CDATA[
# Filename : var.py

i = 5
print i
i = i + 1
print i

s = '''This is a multi-line string.
This is the second line.'''
print s
			]]>
			</programlisting>
		</example>
		
		<section>
			<title>Output</title>
			<screen>
			<![CDATA[
$ python var.py
5
6
This is a multi-line string.
This is the second line.
			]]>
			</screen>
		</section>
		
		<section>
			<title>How It Works</title>
		
			<para>
			
			Here's how this program works. First, we assign the literal constant value
			<literal>5</literal> to the variable <varname>i</varname> using the
			assignment operator (<literal>=</literal>). This line is called a statement
			because it states that something should be done and in this case, we connect
			the variable name <literal>i</literal> to the value <literal>5</literal>.
			Next, we print the value of <varname>i</varname> using the <literal>print</literal>
			statement which, unsurprisingly, just prints the value of the variable to the
			screen.
			
			</para>
			<para>
			
			The we add <literal>1</literal> to the value stored in <varname>i</varname> and
			store it back. We then print it and expectedly, we get the value
			<literal>6</literal>.
			
			</para>
			<para>
			
			Similarly, we assign the literal string to the variable <varname>s</varname>
			and then print it.
			
			</para>
			
			<note>
				<title>Note for C/C++ Programmers</title>
				
				<para>
				
				Variables are used by just assigning them a value. No declaration or
				data type definition is needed/used.
				
				</para>
			</note>
		</section>
	</section>
	<section id="logical-and-physical-lines">
		<title>Logical and Physical Lines</title>
		
		<para>
		
		A physical line is what you <emphasis>see</emphasis> when you write the program. A
		logical line is what Python <emphasis>sees</emphasis> as a single statement. Python
		implicitly assumes that each <emphasis>physical line</emphasis> corresponds to a
		<emphasis>logical line</emphasis>.
		
		</para>
		<para>
		
		An example of a logical line is a statement like <literal>print 'Hello World'</literal>
		- if this was on a line by itself (as you see it in an editor), then this also
		corresponds to a physical line.
		
		</para>
		<para>
		
		Implicitly, Python encourages the use of a single statement per line which makes code
		more readable.
		
		</para>
		<para>
		
		If you want to specify more than one logical line on a single physical line, then you have
		to explicitly specify this using a semicolon (<literal>;</literal>) which indicates the
		end of a logical line/statement. For example,
		
		</para>
		<programlisting>
		<![CDATA[
i = 5
print i
		]]>
		</programlisting>
		<para>
		
		is effectively same as
		
		</para>
		<programlisting>
		<![CDATA[
i = 5;
print i;
		]]>
		</programlisting>
		<para>
		
		and the same can be written as
		
		</para>
		<programlisting>
		<![CDATA[
i = 5; print i;
		]]>
		</programlisting>
		<para>
		
		or even
		
		</para>
		<programlisting>
		<![CDATA[
i = 5; print i
		]]>
		</programlisting>
		<para>
		
		However, I <emphasis role="bold">strongly recommend</emphasis> that you stick to
		<emphasis role="bold">writing a single logical line in a single physical line
		only</emphasis>. Use more than one physical line for a single logical line only
		if the logical line is really long. The idea is to avoid the semicolon as far as
		possible since it leads to more readable code. In fact, I have <emphasis>never</emphasis>
		used or even seen a semicolon in a Python program.
		
		</para>
		<para>
		
		An example of writing a logical line spanning many physical lines follows. This is
		referred to as <emphasis role="bold">explicit line joining</emphasis>.
		
		</para>
		<programlisting>
		<![CDATA[
s = 'This is a string. \
This continues the string.'
print s
		]]>
		</programlisting>
		<para>
		
		This gives the output:
		
		</para>
		<screen>
		<![CDATA[
This is a string. This continues the string.
		]]>
		</screen>
		<para>
		
		Similarly,
		
		</para>
		<programlisting>
		<![CDATA[
print \
i
		]]>
		</programlisting>
		<para>
		
		is the same as
		
		</para>
		<programlisting>
		<![CDATA[
print i
		]]>
		</programlisting>
		<para>
		
		Sometimes, there is an implicit assumption where you don't need to use a backslash. This
		is the case where the logical line uses parentheses, square brackets or curly braces. This
		is is called <emphasis role="bold">implicit line joining</emphasis>.  You can see this in
		action when we write programs using <link linkend="list">lists</link> in later chapters.
		
		</para>
	</section>
	<section id="indentation">
		<title>Indentation</title>
		
		<para>
		
		Whitespace is important in Python. Actually, <emphasis role="bold">whitespace at the
		beginning of the line is important</emphasis>. This is called
		<emphasis role="bold">indentation</emphasis>. Leading whitespace (spaces and tabs) at
		the beginning of the logical line is used to determine the indentation level of the
		logical line, which in turn is used to determine the grouping of statements.
		
		</para>
		<para>
		
		This means that statements which go together <emphasis role="bold">must</emphasis>
		have the same indentation. Each such set of statements is called a
		<emphasis role="bold">block</emphasis>. We will see examples of how blocks are
		important in later chapters.
		
		</para>
		<para>
		
		One thing you should remember is how wrong indentation can give rise to errors.
		For example:
		
		</para>
		<programlisting>
		<![CDATA[
i = 5
 print 'Value is', i # Error! Notice a single space at the start of the line
print 'I repeat, the value is', i
		]]>
		</programlisting>
		<para>
		
		When you run this, you get the following error:
		
		</para>
		<screen>
		<![CDATA[
  File "whitespace.py", line 4
    print 'Value is', i # Error! Notice a single space at the start of the line
    ^
SyntaxError: invalid syntax
		]]>
		</screen>
		<para>
		
		Notice that there is a single space at the beginning of the second line. The error
		indicated by Python tells us that the syntax of the program is invalid i.e. the
		program was not properly written. What this means to you is that <emphasis>you cannot
		arbitrarily start new blocks of statements</emphasis> (except for the main block which
		you have been using all along, of course). Cases where you can use new blocks will be
		detailed in later chapters such as the <link linkend="control-flow">control flow
		chapter</link>.
		
		</para>
		<important>
			<title>How to indent</title>
			<para>
			
			Do <emphasis role="bold">not</emphasis> use a mixture of tabs and spaces for
			the indentation as it does not work across different platforms properly. I
			<emphasis>strongly recommend</emphasis> that you use a
			<emphasis>single tab</emphasis> or <emphasis>two or four spaces</emphasis> for
			each indentation level.
			
			</para>
			<para>
			
			Choose any of these three indentation styles. More importantly, choose one and
			use it <emphasis role="bold">consistently</emphasis> i.e. use that indentation
			style <emphasis>only</emphasis>.
			
			</para>
		</important>
	</section>
	<section id="basics-summary">
		<title>Summary</title>
		
		<para>
		
		Now that we have gone through many nitty-gritty details, we can move on to more
		interesting stuff such as control flow statements. Be sure to become comfortable with
		what you have read in this chapter.
		
		</para>
	</section>
</chapter>