<chapter id="basics">
	<title>O Básico <!--The Basics--></title>

	<para>
	Apenas mostrar um "Hello World" não é o suficiente, não é? Você quer fazer mais que isso. Você quer receber alguma entrada, manipulá-la e obter uma saída. Em Python, podemos fazer isso usando constantes e variáveis.

        <!--
	Just printing 'Hello World' is not enough, is it? You want to do more than that - you
	want to take some input, manipulate it and get something out of it. We can achieve this
	in Python using constants and variables.
	-->
	</para>
	
	<section id="literal-constants">
		<title>Constantes Literais <!--Literal Constants--></title>
		
		<para>
		Um exemplo de constante literal é um número como <literal>5</literal>,	<literal>1.23</literal>, <literal>9.25e-3</literal> ou um string como <literal>'This is a string'</literal> or <literal><![CDATA["It's a string!"]]></literal>. São chamados de literais porque eles são <emphasis>literais</emphasis>, ou seja, você usa seus valores literalmente. O número <literal>2</literal> sempre representa a si próprio e nada mais. Ele é uma constante porque seu valor não pode ser modificado. Dessa forma, todos esses valores são considerados constantes literais.
                
                <!--
		An example of a literal constant is a number like <literal>5</literal>,
		<literal>1.23</literal>, <literal>9.25e-3</literal> or a string like
		<literal>'This is a string'</literal> or <literal><![CDATA["It's a string!"]]></literal>.
		It is called a literal because it is <emphasis>literal</emphasis> - you use its value
		literally. The number <literal>2</literal> always represents itself and nothing else - it
		is a constant because its value cannot be changed. Hence, all these are referred to as
		literal constants.
		-->
		</para>
	</section>
	<section id="numbers">
		<title>Números <!--Numbers--></title>
		
		<para>
		Os números em Python podem ser de quatro tipos: inteiros, inteiros longos, números de ponto flutuante e números complexos.
                <!--
		Numbers in Python are of four types - integers, long integers, floating point and complex
		numbers.
		-->
		</para>
		<itemizedlist>
			<listitem>
				<para>
				Um exemplo de inteiro é o número <literal>2</literal>, que não possui parte fracionária.
                                <!--
				Examples of integers are <literal>2</literal> which are just whole numbers.
				-->
				</para>
			</listitem>
			<listitem>
				<para>
				Inteiros longos também não possuem parte fracionária, porém podem assumir valores maiores que os inteiros comuns.
                                <!--
				Long integers are just bigger whole numbers.
				-->
				</para>
			</listitem>
			<listitem>
				<para>
				Exemplos de números de ponto flutuante são <literal>3.23</literal> e <literal>52.3E-4</literal>.	A notação <literal>E</literal> indica potências de 10. Neste caso, <literal>52.3E-4</literal> significa <literal>52.3 * 10<superscript>-4</superscript></literal>.
				<!--
                                Examples of floating point numbers (or <emphasis>floats</emphasis>
				for short) are <literal>3.23</literal> and <literal>52.3E-4</literal>.
				The <literal>E</literal> notation indicates powers of 10. In this case,
				<literal>52.3E-4</literal> means
				<literal>52.3 * 10<superscript>-4</superscript></literal>.
				-->
				</para>
			</listitem>
			<listitem>
				<para>
				Exemplos de números complexos são <literal>(-5+4j)</literal> e
				<literal>(2.3 - 4.6j)</literal>
                                
                                <!--
				Examples of complex numbers are <literal>(-5+4j)</literal> and
				<literal>(2.3 - 4.6j)</literal>
				-->
				</para>
			</listitem>
		</itemizedlist>
	</section>
	<section id="strings">
		<title>Strings</title>
		<para>
		Uma string é uma <emphasis>seqüência</emphasis> de caracteres. Strings são basicamente um punhado de palavras.
                <!--
		A string is a <emphasis>sequence</emphasis> of <emphasis>characters</emphasis>. Strings
		are basically just a bunch of words.
		-->
		</para>
		<para>
		Eu posso quase garantir que você usará strings em quase todos os programas em Python que você escrever. Então, preste atenção à parte seguinte. Aqui está como se usa strings em Python:
                <!--
		I can almost guarantee that you will be using strings in almost every Python program that
		you write, so pay attention to the following part. Here's how you use strings in Python:
		-->
		</para>
		<itemizedlist>
			<listitem>
				<bridgehead renderas="sect5">Usando Aspas Simples<!--Using Single Quotes--> (<literal>'</literal>)</bridgehead>
				<para>
			        Você pode definir strings usando aspas simples, como em <literal>'Cite-me aqui'</literal>. Todos os espaços em branco - isto é, espaços e tabs - são preservados da maneira em que estão.

                                <!--
				You can specify strings using single quotes such as
				<literal>'Quote me on this'</literal> . All white space i.e. spaces and
				tabs are preserved as-is.
				-->
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Usando Aspas Duplas<!--Using Double Quotes--> (<literal><![CDATA["]]></literal>)</bridgehead>
				<para>
				Strings em aspas duplas funcionam exatamente da mesma maneira que strings em aspas simples. Um exemplo é <literal><![CDATA["Qual é o seu nome?"]]></literal>
                                <!--
            			Strings in double quotes work exactly the same way as strings in single
				quotes. An example is
				<literal><![CDATA["What's your name?"]]></literal>
				-->
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Usando Aspas Triplas<!--Using Triple Quotes--> (<literal>'''</literal> ou <literal><![CDATA["""]]></literal>)</bridgehead>
				<para>
			        Você pode especificar strings em múltiplas linhas usando aspas triplas. É possível usar aspas simples (apóstrofos) ou aspas duplas livremente dentro das aspas triplas. Um exemplo é
                                
				<!--
                                You can specify multi-line strings using triple quotes. You can use single
				quotes and double quotes freely within the triple quotes. An example is
				-->
				</para>
				<programlisting>
                                <![CDATA[
'''Esta é uma string em múltiplas linhas. Esta é a primeira linha.
Esta é a segunda linha.
"Qual é o seu nome?", perguntei.
Ele disse "Bond, James Bond."
'''
				]]>
<!--
				<![CDATA[
'''This is a multi-line string. This is the first line.
This is the second line.
"What's your name?," I asked.
He said "Bond, James Bond."
'''
				]]>
-->                                
				</programlisting>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Seqüências de Escape <!--Escape Sequences--></bridgehead>
				<para>
				Suponha que você tem uma string que contém uma aspas simples (<literal>'</literal>). Como você a definiria? Por exemplo, na string <literal>Quero um copo d'água</literal>. Você não pode definir <literal>'Quero um copo d'água'</literal> pois o Python ficaria confuso para saber onde a string começa e termina. Então, você tem que deixar claro para o Python que esta aspas simples não indica o final da string. Isto pode ser feito com a ajuda do que chamamos de <emphasis>seqüência de escape</emphasis>. Devemos escrever a aspas simples como <literal>\'</literal> (note a barra invertida). Desse modo, você pode especificar a string como <literal>'Quero um copo d\'água'</literal>.

                                <!--

				Suppose, you want to have a string which contains a single quote
				(<literal>'</literal>), how will you specify this string? For example,
				the string is <literal>What's your name?</literal>. You cannot specify
				<literal>'What's your name?'</literal> because Python will be confused
				as to where the string starts and ends. So, you will have to specify
				that this single quote does not indicate the end of the string. This can
				be done with the help of what is called an <emphasis>escape
				sequence</emphasis>. You specify the single quote as <literal>\'</literal>
				- notice the backslash. Now, you can specify the string as
				<literal>'What\'s your name?'</literal>.
				-->

				</para>
				<para>
			Uma outra maneira de definir esta string específica seria <literal>"Quero um copo d'água"</literal>, isto é, usando aspas duplas. De maneira similar, você deve usar uma sequência de escape para mostrar uma aspa dupla dentro de uma string definida por aspas duplas. Do mesmo modo, a própria barra invertida é indicada pela seqüência de escape <literal>\\</literal>.
                        <!--
				Another way of specifying this specific string would be
				<literal>"What's your name?"</literal> i.e. using double quotes. Similarly,
				you have to use an escape sequence forusing a double quote itself in a
				double quoted string. Also, you have to indicate the backslash itself using
				the escape sequence <literal>\\</literal>.
			-->	
				</para>
				<para>
				E se você quisesse definir uma string de duas linhas? Uma maneira é usar uma string definida por aspas triplas, conforme mostrado acima. Outra maneira seia usar uma seqüência de escape para o caracter que indica uma nova linha - <literal>\n</literal>. Um exemplo seria <literal>Esta é a primeira linha\nEsta é a segunda linha</literal>. Uma outra seqüencia de escape útil é o caracter tab - <literal>\t</literal>. Existem várias outras seqüências de escape, mas mencionei aqui apenas as mais úteis.

                                <!--
                                
				What if you wanted to specify a two-line string? One way is to use a
				triple-quoted string as shown above or you can use an escape sequence for
				the newline character - <literal>\n</literal> to indicate the start of a
				new line. An example is <literal>This is the first line\nThis is the
				second line</literal> . Another useful escape sequence to know is the tab
				- <literal>\t</literal>. There are many more escape sequences but I have
				mentioned only the most useful ones here.
				
                                -->
			
                                </para>
				<para>
				
                                Vale frisar que, numa string, uma única barra invertida ao final de uma linha indica que a string continua na próxima linha, sem que nenhuma nova linha seja adicionada. Por exemplo:
                                <!--
				One thing to note is that in a string, a single backslash at the end of
				the line indicates that the string is continued in the next line, but
				no newline is added. For example,
				-->
				</para>
				<programlisting>
					<![CDATA[
"Esta é a primeira frase.\
Esta é a segunda frase."
				]]>
                                <!--
<![CDATA[
"This is the first sentence.\
This is the second sentence."
				]]>]
                                -->
				</programlisting>
				<para>
				é equivalente a <literal><![CDATA["Esta é a primeira frase. Esta é a segunda frase."]]></literal>
<!--
				is equivalent to <literal><![CDATA["This is the first sentence. This is the second sentence."]]></literal>
-->				
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Raw Strings</bridgehead>
				<para>
				Se você precisa definir algumas strings sem qualquer processamento especial, tal qual a manipulação de seqüencias de escape, então você precisa definir uma <emphasis>raw</emphasis> string através dos prefixos <literal>r</literal> ou <literal>R</literal>. Um exemplo seria <literal>r"Novas linhas são indicadas por \n"</literal>.
                                
                                <!--
				If you need to specify some strings where no special processing such as
				escape sequences are handled, then what you need is to specify a
				<emphasis>raw</emphasis> string by prefixing <literal>r</literal> or
				<literal>R</literal> to the string. An example is
				<literal>r"Newlines are indicated by \n"</literal>.
				-->
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Strings Unicode <!--Unicode Strings--></bridgehead>
				<para>                                
				Unicode é um modo padrão de escrever texto internacional. Se você quer escrever texto em seu idioma nativo, tal como Hindi ou Árabe, então você precisa de um editor de texto com suporte a Unicode. Similarmente, Python permite que você manipule texto Unicode - tudo o que você precisa é prefixar a string com <literal>u</literal> ou <literal>U</literal>. Por exemplo, <literal><![CDATA[u"Esta é uma string Unicode."]]></literal>.

                               <!-- 
				Unicode is a standard way of writing international text. If you want to
				write text in your native language such as Hindi or Arabic, then you need
				to have a Unicode-enabled text editor. Similarly, Python allows you to
				handle Unicode text - all you need to do is prefix <literal>u</literal>
				or <literal>U</literal>. For example,
				<literal><![CDATA[u"This is a Unicode string."]]></literal>.
				-->
				</para>
				<para>			
                                Lembre-se de usar strings Unicode quando estiver lidando com arquivos texto, especialmente quando você sabe que o arquivo vai conter texto em outros idiomas que não o inglês.
                                <!--
				Remember to use Unicode strings when you are dealing with text files,
				especially when you know that the file will contain text written in
				languages other than English.
				-->
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Strings são imutáveis <!--Strings are immutable--></bridgehead>
				<para>
                                Isto significa que, uma vez criada a string, você não pode modificá-la. Embora isto possa parecer uma coisa ruim, na verdade não é. Nos vários programas que veremos mais adiante, descobriremos que isto não é uma limitação.
				<!--
				This means that once you have created a string, you cannot change it.
				Although this might seem like a bad thing, it really isn't. We will see
				why this is not a limitation in the various programs that we see later on.
				-->
				</para>
			</listitem>
			<listitem>
				<bridgehead renderas="sect5">Concatenação de literais string <!--String literal concatenation--></bridgehead>
				<para>
				Se você posiciona dois literais string lado a lado, eles são concatenados automaticamente pelo Python. Por exemplo, <literal>'Qual é' 'o seu nome?'</literal> é convertido automaticamente para <literal><![CDATA["Qual é o seu nome?"]]></literal>.

				<!--
                                If you place two string literals side by side, they are automatically
				concatenated by Python. For example, <literal>'What\'s' 'your name?'</literal>
				is automatically converted in to <literal><![CDATA["What's your name?"]]></literal>.
                                -->
				
				</para>
			</listitem>
		</itemizedlist>
		<note>
			<title>Nota para programadores C/C++ <!--Note for C/C++ Programmers--></title>
			<para>
			Em Python não existe um tipo de dado <classname>char</classname> à parte. Não há necessidade real para ele e eu estou certo de que você não sentirá falta.

			<!--
                        There is no separate <classname>char</classname> data type in Python. There is
			no real need for it and I am sure you won't miss it.
			-->
			</para>
		</note>
		<note>
			<title>Nota para programadores Perl/PHP <!-- Note for Perl/PHP Programmers--></title>
			<para>
			Lembre-se de que strings de aspas simples e de aspas duplas são iguais - elas não diferem em nenhum aspecto.
                        <!--
			Remember that single-quoted strings and double-quoted strings are the same - they
			do not differ in any way.
			-->
			</para>
		</note>
		<note>
			<title>Nota para usuários de Expressões Regulares <!--Note for Regular Expression Users--></title>
			<para>
			Sempre use raw strings quando estiver lidando com expressões regulares. Do contrário, pode ser preciso tratar a barra invertida com muita freqüência. Por exemplo, <literal>'\\1'</literal> é o mesmo que <literal>r'\1'</literal>.

                        <!--
			Always use raw strings when dealing with regular expressions. Otherwise, a lot of
			backwhacking may be required. For example, backreferences can be referred to as
			<literal>'\\1'</literal> or <literal>r'\1'</literal>.
			-->
			</para>
		</note>
	</section>
	<section id="variables">
		<title>Variáveis <!--Variables--></title>
		<para>
                Usar somente constantes literais pode ser tornar rapidamente incômodo - precisamos de alguma maneira de armazenar informação, bem como manipulá-la. É aí onde as <emphasis>variáveis</emphasis> entram em cena. Variáveis são exatamente o que seu nome diz - seu valor pode variar, ou seja, você pode armazenar qualquer coisa utilizando uma variável. Variáveis nada mais são que partes da memória do seu computador onde você armazena alguma informação. Ao contrário das constantes literais, você precisa de alguma jeito de acessar estas variáveis, e é por isso que você dá nomes a elas.
		<!--
		Using just literal constants can soon become boring - we need some way of storing any
		information and manipulate them as well. This is where <emphasis>variables</emphasis>
		come into the picture. Variables are exactly what they mean - their value can vary i.e.
		you can store anything using a variable. Variables are just parts of your computer's
		memory where you store some information. Unlike literal constants, you need some method
		of accessing these variables and hence you give them names.
		-->
		</para>
	</section>
	<section id="identifier">
		<title>Nomeando Identificadores <!--Identifier Naming--></title>
		
		<para>
		Variáveis são exemplos de identificadores. <emphasis>Identificadores</emphasis> são nomes dados para identificar <emphasis>algo</emphasis>. Existem algumas regras que você tem que seguir para nomear identificadores:
                <!--
		Variables are examples of identifiers. <emphasis>Identifiers</emphasis> are names given
		to identify <emphasis>something</emphasis>. There are some rules you have to follow for
		naming identifiers:
		-->
		</para>
		
		<itemizedlist>
			<listitem>
				<para>
				O primeiro caracter do identificador deve ser uma letra do alfabeto (maiúscula ou minúscula) ou um underscore ('_').
                                <!--
				The first character of the identifier must be a letter of the alphabet
				(upper or lowercase) or an underscore ('_').
				-->
				</para>
			</listitem>
			<listitem>
				<para>
				O restante do nome do identificador pode consistir de letras (maiúsculas ou minúsculas), underscores ('_') ou dígitos (0-9).
                                <!--
				The rest of the identifier name can consist of letters (upper or lowercase),
				underscores ('_') or digits (0-9).
				-->
				</para>
			</listitem>
			<listitem>
				<para>
				Nomes de identificadores são sensíveis à caixa. Por exemplo, <literal>meunone</literal> e <literal>meuNone</literal> <emphasis role="bold">não</emphasis> são a mesma coisa. Perceba o <literal>n</literal> minúsculo no primeiro e o <literal>N</literal> maiúsculo no segundo.

                                <!--
				Identifier names are case-sensitive. For example, <literal>myname</literal>
				and <literal>myName</literal> are <emphasis role="bold">not</emphasis> the
				same. Note the lowercase <literal>n</literal> in the former and the
				uppercase <literal>N</literal> in te latter.
				-->
				</para>
			</listitem>
			<listitem>
				<para>
				Exemplos de nomes de identificadores <emphasis>válidos</emphasis> são <literal>i</literal>, <literal>__meu_nome</literal>, <literal>nome_23</literal> e <literal>a1b2_c3</literal>.

                                <!--
				Examples of <emphasis>valid</emphasis> identifier names are
				<literal>i</literal>, <literal>__my_name</literal>, <literal>name_23</literal>
				and <literal>a1b2_c3</literal>.
				-->
				</para>
			</listitem>
			<listitem>
				<para>
			        Exemplos de nomes de identificadores <emphasis>inválidos</emphasis> são	<literal>2coisas</literal>, <literal>este está espaçado</literal> e <literal>meu-nome</literal>.
                                
                                <!--
				Examples of <emphasis>invalid</emphasis> identifier names are
				<literal>2things</literal>, <literal>this is spaced out</literal>
				and <literal>my-name</literal>.
				-->
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section id="data-types">
		<title>Tipos de Dados <!--Data Types--></title>
		
		<para>
		As variáveis podem guardar valores de diferentes tipos, os chamados <emphasis role="bold">tipos de dados</emphasis>. Os tipos básicos são os números e as strings, sobre os quais já discutimos. Nos capítulos posteriores, veremos como criar nossos próprios tipos usando <link linkend="oops">classes</link>.

		<!--
                Variables can hold values of different types called <emphasis role="bold">data
		types</emphasis>. The basic types are numbers and strings, which we have already
		discussed. In later chapters, we will see how to create our own types using
		<link linkend="oops">classes</link>.
                -->
		
		</para>
	</section>
	<section id="data-type-object">
		<title>Objetos<!--Objects--></title>
		<para>
		Lembre-se: Python considera qualquer coisa usada em um programa como sendo um <emphasis>objeto</emphasis>. Isto vale em sentido genérico. Ao invés de dizermos 'o <emphasis>alguma coisa</emphasis>', dizemos 'o <emphasis>objeto</emphasis>'.

		<!--
                Remember, Python refers to anything used in a program as an <emphasis>object</emphasis>.
		This is meant in the generic sense. Instead of saying 'the <emphasis>something</emphasis>',
		we say 'the <emphasis>object</emphasis>'.
                -->
		
		</para>
		
		<note>
			<title>Nota para os usuários de Programação Orientada a Objetos<!--Note for Object Oriented Programming users--></title>
			<para>
			Python é fortemente orientada a objetos no sentido de que tudo é um objeto, inclusive números, strings e até mesmo funções.
                        <!--
			Python is strongly object-oriented in the sense that everything is an object
			including numbers, strings and even functions.
			-->
			</para>
		</note>
		
		<para>
                Veremos agora como utilizar variáveis junto com constantes literais. Salve o exemplo a seguir e execute o programa.
		<!--
		We will now see how to use variables along with literal constants. Save the following
		example and run the program.
		-->
		</para>
		
		<note>
			<title>Como escrever programas em Python <!--How to write Python programs--></title>
			<para>
			Deste ponto em diante, o procedimento padrão para salvar e executar um programa Python é o seguinte:
                        <!--
			Henceforth, the standard procedure to save and run a Python program is as follows:
			-->
			</para>
			
			<procedure>
				<step>
					<para>
					Abrir seu editor de texto favorito.
                                        <!--
					Open your favorite editor.
					-->
					</para>
				</step>
				<step>
					<para>
                                        Digitar o código do programa fornecido no exemplo.
					<!--
					Enter the program code given in the example.
					-->
					</para>
				</step>
				<step>
					<para>
                                        Salvá-lo como um arquivo com o nome mencionado no comentário. Eu sigo a convenção de salvar todos os programas Pyhton com a extensão <literal>.py</literal>
					<!--
					Save it as a file with the filename mentioned in the comment.
					I follow the convention of having all Python programs saved with
					the extension <literal>.py</literal>.
					-->
					</para>
				</step>
				<step>
					<para>
					Executar o interpretador com o comando <command>python <replaceable>programa.py</replaceable></command> ou usar o IDLE para executar os programas. Você pode ainda usar o <link linkend="executable-python-programs">método executável</link> conforme explicado anteriormente.
                                       <!--
                                        Run the interpreter with the command
					<command>python <replaceable>program.py</replaceable></command> or
					use IDLE to run the programs. You can also use the
					<link linkend="executable-python-programs">executable method</link>
					as explained earlier.
					-->
					</para>
				</step>
			</procedure>
		</note>
		
		<example>
			<title>Usando Variáveis e Constantes Literais <!--Using Variables and Literal constants--></title>
			<programlisting>
			<![CDATA[
# Nome do arquivo : var.py

i = 5
print i
i = i + 1
print i

s = '''Esta é uma string de múltiplas linhas.
Esta é a segunda linha.'''
print s
			]]>
			<!--
			<![CDATA[
# Filename : var.py

i = 5
print i
i = i + 1
print i

s = '''This is a multi-line string.
This is the second line.'''
print s
			]]>
			-->
			</programlisting>
		</example>
		
		<section>
			<title>Saída <!--Output--></title>
			<screen>
			<![CDATA[
$ python var.py
5
6
Esta é uma string de múltiplas linhas.
Esta é a segunda linha.
			]]>
			<!--
			<![CDATA[
$ python var.py
5
6
This is a multi-line string.
This is the second line.
			]]>
			-->
			</screen>
		</section>
		
		<section>
			<title>Como Funciona? <!--How It Works--></title>
		
			<para>
			Aqui está como este programa funciona. Primeiro, atribuímos o valor literal constante <literal>5</literal> à variável <varname>i</varname> usando o operador de atribuição (<literal>=</literal>). Esta linha é chamada de comando, porque determina que algo deve ser feito e, neste caso, conectamos o nome da variável <literal>i</literal> ao valor <literal>5</literal>. Em seguida, imprimimos o valor de <varname>i</varname> usando o comando <literal>print</literal>, o qual, como era de se esperar, simplesmente imprime o valor da variável na tela.
			<!--
			Here's how this program works. First, we assign the literal constant value
			<literal>5</literal> to the variable <varname>i</varname> using the
			assignment operator (<literal>=</literal>). This line is called a statement
			because it states that something should be done and in this case, we connect
			the variable name <literal>i</literal> to the value <literal>5</literal>.
			Next, we print the value of <varname>i</varname> using the <literal>print</literal>
			statement which, unsurprisingly, just prints the value of the variable to the
			screen.
			-->
			</para>
			<para>
			Então adicionamos <literal>1</literal> ao valor armazenado em <varname>i</varname> e o armazenamos de volta. Nós então o imprimimos e, como era de se esperar, obtemos o valor <literal>6</literal>.
			
			<!--
			The we add <literal>1</literal> to the value stored in <varname>i</varname> and
			store it back. We then print it and expectedly, we get the value
			<literal>6</literal>.
			-->
			</para>
			<para>
			De modo semelhante, atribuímos a string literal à variável <varname>s</varname> e então a imprimimos.
			<!--
			Similarly, we assign the literal string to the variable <varname>s</varname>
			and then print it.
			-->
			</para>
			
			<note>
				<title>Nota para programadores C/C++ <!--Note for C/C++ Programmers--></title>
				
				<para>
			Variáveis são utilizadas apenas atribuindo um valor a elas. Não é necessária nenhuma declaração ou definição de tipo de dado.
            <!--	
				Variables are used by just assigning them a value. No declaration or
				data type definition is needed/used.
				-->
				</para>
			</note>
		</section>
	</section>
	<section id="logical-and-physical-lines">
		<title>Linhas Lógicas e Linhas Físicas <!--Logical and Physical Lines--></title>
		
		<para>
		Uma linha física é a que <emphasis>você vê</emphasis> quando escreve um programa. Uma linha lógica é o que o <emphasis>Python vê</emphasis> como um comando único. Python assume implicitamente que cada <emphasis>linha física</emphasis> corresponde a uma <emphasis>linha lógica</emphasis>.
		<!--
		A physical line is what you <emphasis>see</emphasis> when you write the program. A
		logical line is what Python <emphasis>sees</emphasis> as a single statement. Python
		implicitly assumes that each <emphasis>physical line</emphasis> corresponds to a
		<emphasis>logical line</emphasis>.
		-->
		</para>
		<para>
		Um exemplo de linha lógica é uma comando como <literal>print 'Ola Mundo'</literal> - se ele por si só já estava em uma linha (como você vê no editor), então corresponde também a uma linha física.
		<!--
		An example of a logical line is a statement like <literal>print 'Hello World'</literal>
		- if this was on a line by itself (as you see it in an editor), then this also
		corresponds to a physical line.
		-->
		</para>
		<para>
		Implicitamente, Python encoraja o uso de um único comando por linha, o que torna o código mais legível.
		<!--
		Implicitly, Python encourages the use of a single statement per line which makes code
		more readable.
		-->
		</para>
		<para>
		Se você quer especificar mais de uma linha lógica em uma única linha física, então você tem que especificar explicitamente, usando um ponto-e-vírgula (<literal>;</literal>), o que indica o fim de uma linha lógica/comando. Por exemplo, 
		<!--
		If you want to specify more than one logical line on a single physical line, then you have
		to explicitly specify this using a semicolon (<literal>;</literal>) which indicates the
		end of a logical line/statement. For example,
		-->
		</para>
		<programlisting>
		<![CDATA[
i = 5
print i
		]]>
		</programlisting>
		<para>
		
		é o mesmo que
		<!--is effectively same as-->
		
		</para>
		<programlisting>
		<![CDATA[
i = 5;
print i;
		]]>
		</programlisting>
		<para>
		e o mesmo pode ser escrito como
		<!--and the same can be written as-->
		
		</para>
		<programlisting>
		<![CDATA[
i = 5; print i;
		]]>
		</programlisting>
		<para>
		ou mesmo
		<!--or even-->
		
		</para>
		<programlisting>
		<![CDATA[
i = 5; print i
		]]>
		</programlisting>
		<para>
		Entretando, eu <emphasis role="bold">recomendo fortemente</emphasis> que você se acostume a <emphasis role="bold">apenas escrever uma única linha lógica em uma única linha física</emphasis>. Use mais de uma linha física para cada linha lógica apenas se a linha lógica for realmente muito longa. A idéia é evitar ao máximo o ponto-e-vírgula, tornando o código mais legível. Na verdade, eu <emphasis>nunca</emphasis> usei ou mesmo vi um ponto-e-vígula em um programa Python.
		<!--
		However, I <emphasis role="bold">strongly recommend</emphasis> that you stick to
		<emphasis role="bold">writing a single logical line in a single physical line
		only</emphasis>. Use more than one physical line for a single logical line only
		if the logical line is really long. The idea is to avoid the semicolon as far as
		possible since it leads to more readable code. In fact, I have <emphasis>never</emphasis>
		used or even seen a semicolon in a Python program.
		-->
		</para>
		<para>
		Segue um exemplo da escrita de uma linha lógica em várias linhas físicas. Isto é chamado de <emphasis role="bold">junção explícita de linhas</emphasis>.
		<!--
		An example of writing a logical line spanning many physical lines follows. This is
		referred to as <emphasis role="bold">explicit line joining</emphasis>.
		-->
		</para>
		<programlisting>
		<![CDATA[
s = 'Isto é uma string. \
Isto continua a string.'
print s
		]]>
		<!--
		<![CDATA[
s = 'This is a string. \
This continues the string.'
print s
		]]>
		-->
		</programlisting>
		<para>
		Isto dá a saída:
		<!--
		This gives the output:
		-->
		</para>
		<screen>
		<![CDATA[
Isto é uma string. Isto continua a string.
		]]>
		</screen>
		<para>
		De maneira similar,
		<!--
		Similarly,
		-->
		</para>
		<programlisting>
		<![CDATA[
print \
i
		]]>
		</programlisting>
		<para>
		É o mesmo que
		<!--
		is the same as
		-->
		</para>
		<programlisting>
		<![CDATA[
print i
		]]>
		</programlisting>
		<para>
		Às vezes há uma suposição implícita de onde você não precisa usar uma barra invertida. São os casos onde a linha lógica usa parênteses, colchetes ou chaves. Isto é chamado de <emphasis role="bold">junção implícita de linhas</emphasis>.  Você poderá vê-la em ação nos capítulos posteriores, quando escrevermos programas que utilizam <link linkend="list">listas</link>.
		<!--
		Sometimes, there is an implicit assumption where you don't need to use a backslash. This
		is the case where the logical line uses parentheses, square brackets or curly braces. This
		is is called <emphasis role="bold">implicit line joining</emphasis>.  You can see this in
		action when we write programs using <link linkend="list">lists</link> in later chapters.
		-->
		</para>
	</section>
	<section id="indentation">
		<title>Indentação <!--Indentation--></title>
		
		<para>
		Os espaços em branco são importantes em Python. Na verdade, <emphasis role="bold">espaços em branco no início das linhas são importantes</emphasis>. Isto é chamado de <emphasis role="bold">indentação</emphasis>. Espaços em branco (tabulações e espaços) no início de uma linha lógica são utilizados para determinar o agrupamento de comandos.
		<!--
		Whitespace is important in Python. Actually, <emphasis role="bold">whitespace at the
		beginning of the line is important</emphasis>. This is called
		<emphasis role="bold">indentation</emphasis>. Leading whitespace (spaces and tabs) at
		the beginning of the logical line is used to determine the indentation level of the
		logical line, which in turn is used to determine the grouping of statements.
		-->
		</para>
		<para>
		
		This means that statements which go together <emphasis role="bold">must</emphasis>
		have the same indentation. Each such set of statements is called a
		<emphasis role="bold">block</emphasis>. We will see examples of how blocks are
		important in later chapters.
		
		</para>
		<para>
		
		One thing you should remember is how wrong indentation can give rise to errors.
		For example:
		
		</para>
		<programlisting>
		<![CDATA[
i = 5
 print 'Value is', i # Error! Notice a single space at the start of the line
print 'I repeat, the value is', i
		]]>
		</programlisting>
		<para>
		
		When you run this, you get the following error:
		
		</para>
		<screen>
		<![CDATA[
  File "whitespace.py", line 4
    print 'Value is', i # Error! Notice a single space at the start of the line
    ^
SyntaxError: invalid syntax
		]]>
		</screen>
		<para>
		
		Notice that there is a single space at the beginning of the second line. The error
		indicated by Python tells us that the syntax of the program is invalid i.e. the
		program was not properly written. What this means to you is that <emphasis>you cannot
		arbitrarily start new blocks of statements</emphasis> (except for the main block which
		you have been using all along, of course). Cases where you can use new blocks will be
		detailed in later chapters such as the <link linkend="control-flow">control flow
		chapter</link>.
		
		</para>
		<important>
			<title>How to indent</title>
			<para>
			
			Do <emphasis role="bold">not</emphasis> use a mixture of tabs and spaces for
			the indentation as it does not work across different platforms properly. I
			<emphasis>strongly recommend</emphasis> that you use a
			<emphasis>single tab</emphasis> or <emphasis>two or four spaces</emphasis> for
			each indentation level.
			
			</para>
			<para>
			
			Choose any of these three indentation styles. More importantly, choose one and
			use it <emphasis role="bold">consistently</emphasis> i.e. use that indentation
			style <emphasis>only</emphasis>.
			
			</para>
		</important>
	</section>
	<section id="basics-summary">
		<title>Summary</title>
		
		<para>
		
		Now that we have gone through many nitty-gritty details, we can move on to more
		interesting stuff such as control flow statements. Be sure to become comfortable with
		what you have read in this chapter.
		
		</para>
	</section>
</chapter>
