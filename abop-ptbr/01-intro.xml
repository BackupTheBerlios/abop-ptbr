<chapter id="introduction">
	<title>Introdução<!--Introduction--></title>
	
	<section id="introduction-section">
		<title>Introdução<!--Introduction--></title>
		
		<para>
Python é uma daquelas raras linguagens que se auto-proclamam tanto <emphasis role="bold">simples</emphasis> quanto <emphasis role="bold">poderosas</emphasis>. Você ficará agradavelmente surpreso quando descobrir o quanto é fácil se concentrar na solução do problema ao invés de se preocupar com a sintaxe e com a estrutura da linguagem na qual está programando.

<!--
Python is one of those rare languages which can claim to be both
<emphasis role="bold">simple</emphasis> and <emphasis role="bold">powerful</emphasis>.
You will find that you will be pleasantly surprised on how easy it is to concentrate
on the solution to the problem rather than the syntax and structure of the language
you are programming in.
-->		
		</para>
		<para>
A apresentação oficial de Python é 
<blockquote>
    <para>
    Python é uma linguagem de programação poderosa e fácil de aprender. Ela tem estruturas de dados de alto nível e uma abordagem simples, porém eficaz, à programação orientada a objetos. A sintaxe elegante e a tipagem dinâmica, junto com seu caráter interpretado, fazem de Python a linguagem ideal para criação de scripts e desenvolvimento rápido de aplicações em muitas áreas e na maioria das plataformas.
    </para>
</blockquote>

Discutirei detalhadamente a maioria destas característas na próxima sessão.

<!--		
		The official introduction to Python is
		
		<blockquote>
			<para>
			
			Python is an easy to learn, powerful programming language. It has
			efficient high-level data structures and a simple but effective approach
			to object-oriented programming. Python's elegant syntax and dynamic typing,
			together with its interpreted nature, make it an ideal language for
			scripting and rapid application development in many areas on most platforms.
			
			</para>
		</blockquote>
		
		I will discuss most of these features in more detail in the next section.
-->		
		</para>
		<note>

Guido van Rossum, o criador da linguagem Python, batizou a linguagem com o nome do programa da BBC &quot;Monty Python's Flying Circus &quot;. Ele, particularmente, não aprecia cobras que matam animais enrolando-se neles e esmagando-os.

<!--		Guido van Rossum, the creator of the Python language, named the language after the
		BBC show &quot;Monty Python's Flying Circus &quot;. He doesn't particularly like
		snakes that kill animals for food by winding their long bodies around them and
		crushing them.
-->		
		</note>
	</section>
	
	<section id="features-of-python">
		<title>Características do Python<!--Features of Python--></title>
		<variablelist>
			<varlistentry>
				<term>Simples<!--Simple--></term>
				<listitem>
					<para>
Python é uma linguagem simples e minimalista. Ler um bom programa em Python é quase como ler em inglês, ainda que seja um inglês bem restrito. Este caráter de pseudo-código do Python é um de seus maiores pontos fortes. Ele permite que você se concentre na solução do problema e não na linguagem em si.					
<!--Python is a simple and minimalistic language. Reading a good
Python program feels almost like reading English, although very
strict English! This pseudo-code nature of Python is one of its
greatest strengths. It allows you to concentrate on the solution
to the problem rather than the language itself.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Fácil de Aprender<!--Easy to Learn--></term>
				<listitem>
					<para>
Como você verá, é extremamente fácil iniciar-se em Python. A linguagem possui uma sintaxe extraordinariamente simple, como já mencionado.

<!--As you will see, Python is extremely easy to get started with.
Python has an extraordinarily simple syntax, as already mentioned.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Livre e de Código Aberto<!--Free and Open Source--></term>
				<listitem>
					<para>
Python é um exemplo de <acronym>FLOSS</acronym> (Free/Libre and Open Source Software. Traduzindo, você pode distribuir livremente cópias deste software, ler seu código-fonte, modificá-lo, usar trechos em novos programas livres e tudo o que você quiser fazer. FLOSS é baseado no conceito de uma comunidade que compartilha conhecimento. Esta é um dos motivos pelos quais Python é tão bom - ele vem sendo criado e constantemente melhorado por uma comunidade que simplesmente que ver um Python cada vez melhor.
				
<!--Python is an example of a <acronym>FLOSS</acronym>
(Free/Libre; and Open Source Software). In simple terms,
you can freely distribute copies of this software, read it's
source code, make changes to it, use pieces of it in new
free programs, and that you know you can do these things. FLOSS
is based on the concept of a community which shares knowledge.
This is one of the reasons why Python is so good - it has been
created and is constantly improved by a community who just want
to see a better Python.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Linguagem de Alto Nível <!--High-level Language--></term>
				<listitem>
					<para>
Quando você escreve programas em Python, não há necessidade de se preocupar com detalhes de baixo nível tais como manipular a memória utilizada pelo programa etc.

<!--When you write programs in Python, you never need to bother about
the low-level details such as managing the memory used by your
program, etc.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Portável<!--Portable--></term>
				<listitem>
					<para>
Por ser uma linguagem de código aberto, Python foi portada (ou seja, modificada para funcionar) em muitas plataformas. Todos os seus programas em Python podem rodar em qualquer uma destas plataformas sem precisar de mudanças, desde que você seja cuidadoso o suficiente para evitar usar características que dependam do sistema.
<!--					
Due to its open-source nature, Python has been ported (i.e. changed
to make it work on) to many platforms. All your Python programs can
work on any of these platforms without requiring any changes at all
if you are careful enough to avoid any system-dependent features.
-->					
					</para>
					<para>
					
					You can use Python on Linux, Windows, FreeBSD, Macintosh, Solaris,
					OS/2, Amiga, AROS, AS/400, BeOS, OS/390, z/OS, Palm OS, QNX, VMS,
					Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE
					and even PocketPC !
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Interpreted</term>
				<listitem>
					<para>
					
					This requires a bit of explanation.
					
					</para>
					<para>
					
					A program written in a compiled language like C or C++ is converted
					from the source language i.e. C or C++ into a language that is
					spoken by your computer (binary code i.e. 0s and 1s) using a compiler
					with various flags and options. When you run the program, the
					linker/loader software copies the program from hard disk to memory
					and starts running it.
					
					</para>
					<para id="python-vm">
					
					Python, on the other hand, does not need compilation to binary.
					You just <emphasis>run</emphasis> the program directly from the source
					code. Internally, Python converts the source code into an intermediate
					form called bytecodes and then translates this into the native
					language of your computer and then runs it. All this, actually, makes
					using Python much easier since you don't have to worry about
					compiling the program, making sure that the proper libraries are
					linked and loaded, etc, etc. This also makes your Python programs
					much more portable, since you can just copy your Python program onto
					another computer and it just works!
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Object Oriented</term>
				<listitem>
					<para>
					
					Python supports procedure-oriented programming as well as
					object-oriented programming. In <emphasis>procedure-oriented</emphasis>
					languages, the program is built around procedures or functions which
					are nothing but reusable pieces of programs. In
					<emphasis>object-oriented</emphasis> languages, the program is built
					around objects which combine data and functionality. Python has a very
					powerful but simplistic way of doing OOP, especially when compared to
					big languages like C++ or Java.
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Extensible</term>
				<listitem>
					<para>
					
					If you need a critical piece of code to run very fast or want to
					have some piece of algorithm not to be open, you can code that
					part of your program in C or C++ and then use them from your
					Python program.
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Embeddable</term>
				<listitem>
					<para>
					
					You can embed Python within your C/C++ programs to give 'scripting'
					capabilities for your program's users.
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Extensive Libraries</term>
				<listitem>
					<para>
					
					The Python Standard Library is huge indeed. It can help you do various
					things involving regular expressions, documentation generation, unit
					testing, threading, databases, web browsers, CGI, ftp, email, XML,
					XML-RPC, HTML, WAV files, cryptography, GUI (graphical user interfaces),
					Tk, and other system-dependent stuff. Remember, all this is always
					available wherever Python is installed. This is called the 'Batteries
					Included' philosophy of Python.
					
					</para>
					<para>
					
					Besides, the standard library, there are various other high-quality
					libraries such as <ulink url="http://www.wxpython.org">wxPython</ulink>,
					<ulink url="http://www.twistedmatrix.com/products/twisted">Twisted</ulink>,
					<ulink url="http://www.pythonware.com/products/pil/index.htm">Python Imaging
					Library</ulink> and many more.
					
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	
		<section id="introduction-summary">
			<title>Summary</title>
			
			<para>
			
			Python is indeed an exciting and powerful language. It has the right combination
			of performance and features that make writing programs in Python both fun and easy.
			
			</para>
		</section>
	</section>
	
	<section id="why-not-perl">
		<title>Why not Perl?</title>
		
		<para>
		
		If you didn't know already, Perl is another extremely popular open source interpreted
		programming language.
		
		</para>
		<para>
		
		If you have ever tried writing a large program in Perl, you would have answered this
		question yourself! In other words, Perl programs are easy when they are small and it
		excels at small hacks and scripts to 'get work done'. However, they quickly become
		unwieldy once you start writing bigger programs and I am speaking this out of
		experience of writing large Perl programs at Yahoo!
		
		</para>
		<para>
		
		When compared to Perl, Python programs are definitely simpler, clearer, easier to
		write and hence more understandable and maintainable. I do admire Perl and I do use
		it on a daily basis for various things but whenever I write a program, I always start
		thinking in terms of Python because it has become so natural for me. Perl has undergone
		so many hacks and changes, that it feels like it is one big (but one hell of a) hack.
		Sadly, the upcoming Perl 6 does not seem to be making any improvements regarding this.
		
		</para>
		<para>
		
		The only and very significant advantage that I feel Perl has, is its huge
		<ulink url="http://cpan.perl.org">CPAN</ulink> library - the Comprehensive Perl Archive
		Network. As the name suggests, this is a humongous collection of Perl modules and it is
		simply mind-boggling because of its sheer size and depth - you can do virtually anything
		you can do with a computer using these modules. One of the reasons that Perl has more
		libraries than Python is that it has been around for a much longer time than Python.
		Maybe I should suggest a port-Perl-modules-to-Python hackathon on
		<ulink url="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</ulink> :)
		
		</para>
		<para>
		
		Also, the new <ulink url="http://www.parrotcode.org">Parrot virtual machine</ulink> is
		designed to run both the completely redesigned Perl 6 as well as Python and other interpreted
		languages like Ruby, PHP and Tcl. What this means to you is that <emphasis>maybe</emphasis>
		you will be able to use all Perl modules from Python in the future, so that will give you
		the best of both worlds - the powerful CPAN library combined with the powerful Python
		language. However, we will have to just wait and see what happens.
		
		</para>
	</section>
	
	<section id="what-programmers-say">
		<title>What Programmers Say</title>
		<para>
		
		You may find it interesting to read what great hackers like ESR have to say about Python:
		
		</para>
		<itemizedlist>
			<listitem>
				<para>
				
				<emphasis role="bold">Eric S. Raymond</emphasis> is the author of
				'The Cathedral and the Bazaar' and is also the person who coined the term
				'Open Source'. He says that <ulink
				url="http://www.linuxjournal.com/article.php?sid=3882">Python has become
				his favorite programming language</ulink>. This article was the real
				inspiration for my first brush with Python.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				<emphasis role="bold">Bruce Eckel</emphasis> is the author of the
				famous 'Thinking in Java' and 'Thinking in C++' books. He says that no
				language has made him more productive than Python. He says that Python
				is perhaps the only language that focuses on making things easier for
				the programmer. Read the <ulink
				url="http://www.artima.com/intv/aboutme.html">complete interview</ulink>
				for more details.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				<emphasis role="bold">Peter Norvig</emphasis> is a well-known Lisp
				author and Director of Search Quality at Google (thanks to Guido van
				Rossum for pointing that out). He says that Python has always been an
				integral part of Google. You can actually verify this statement by
				looking at the <ulink url="http://www.google.com/jobs/index.html"
				>Google Jobs</ulink> page which lists Python knowledge as a requirement
				for software engineers.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				<emphasis role="bold">Bruce Perens</emphasis> is a co-founder of
				OpenSource.org and the UserLinux project. UserLinux aims to create a
				standardized Linux distribution supported by multiple vendors. Python
				has beaten contenders like Perl and Ruby to become the main programming
				language that will be supported by UserLinux.
				
				</para>
			</listitem>
		</itemizedlist>
	</section>
</chapter>
