<chapter id="introduction">
	<title>Introdução<!--Introduction--></title>
	
	<section id="introduction-section">
		<title>Introdução<!--Introduction--></title>
		
		<para>
Python é uma daquelas raras linguagens que se auto-proclamam tanto <emphasis role="bold">simples</emphasis> quanto <emphasis role="bold">poderosas</emphasis>. Você ficará agradavelmente surpreso quando descobrir o quanto é fácil se concentrar na solução do problema ao invés de se preocupar com a sintaxe e com a estrutura da linguagem na qual está programando.

<!--
Python is one of those rare languages which can claim to be both
<emphasis role="bold">simple</emphasis> and <emphasis role="bold">powerful</emphasis>.
You will find that you will be pleasantly surprised on how easy it is to concentrate
on the solution to the problem rather than the syntax and structure of the language
you are programming in.
-->		
		</para>
		<para>
A apresentação oficial de Python é 
<blockquote>
    <para>
    Python é uma linguagem de programação poderosa e fácil de aprender. Ela tem estruturas de dados de alto nível e uma abordagem simples, porém eficaz, à programação orientada a objetos. A sintaxe elegante e a tipagem dinâmica, junto com seu caráter interpretado, fazem de Python a linguagem ideal para criação de scripts e desenvolvimento rápido de aplicações em muitas áreas e na maioria das plataformas.
    </para>
</blockquote>

Discutirei detalhadamente a maioria destas característas na próxima sessão.

<!--		
		The official introduction to Python is
		
		<blockquote>
			<para>
			
			Python is an easy to learn, powerful programming language. It has
			efficient high-level data structures and a simple but effective approach
			to object-oriented programming. Python's elegant syntax and dynamic typing,
			together with its interpreted nature, make it an ideal language for
			scripting and rapid application development in many areas on most platforms.
			
			</para>
		</blockquote>
		
		I will discuss most of these features in more detail in the next section.
-->		
		</para>
		<note>

Guido van Rossum, o criador da linguagem Python, batizou a linguagem com o nome do programa da BBC &quot;Monty Python's Flying Circus &quot;. Ele, particularmente, não aprecia cobras que matam animais enrolando-se neles e esmagando-os.

<!--		Guido van Rossum, the creator of the Python language, named the language after the
		BBC show &quot;Monty Python's Flying Circus &quot;. He doesn't particularly like
		snakes that kill animals for food by winding their long bodies around them and
		crushing them.
-->		
		</note>
	</section>
	
	<section id="features-of-python">
		<title>Características do Python<!--Features of Python--></title>
		<variablelist>
			<varlistentry>
				<term>Simples<!--Simple--></term>
				<listitem>
					<para>
Python é uma linguagem simples e minimalista. Ler um bom programa em Python é quase como ler em inglês, ainda que seja um inglês bem restrito. Este caráter de pseudo-código do Python é um de seus maiores pontos fortes. Ele permite que você se concentre na solução do problema e não na linguagem em si.					
<!--Python is a simple and minimalistic language. Reading a good
Python program feels almost like reading English, although very
strict English! This pseudo-code nature of Python is one of its
greatest strengths. It allows you to concentrate on the solution
to the problem rather than the language itself.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Fácil de Aprender<!--Easy to Learn--></term>
				<listitem>
					<para>
Como você verá, é extremamente fácil iniciar-se em Python. A linguagem possui uma sintaxe extraordinariamente simple, como já mencionado.

<!--As you will see, Python is extremely easy to get started with.
Python has an extraordinarily simple syntax, as already mentioned.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Livre e de Código Aberto<!--Free and Open Source--></term>
				<listitem>
					<para>
Python é um exemplo de <acronym>FLOSS</acronym> (Free/Libre and Open Source Software. Traduzindo, você pode distribuir livremente cópias deste software, ler seu código-fonte, modificá-lo, usar trechos em novos programas livres e tudo o que você quiser fazer. FLOSS é baseado no conceito de uma comunidade que compartilha conhecimento. Esta é um dos motivos pelos quais Python é tão bom - ele vem sendo criado e constantemente melhorado por uma comunidade que simplesmente que ver um Python cada vez melhor.
				
<!--Python is an example of a <acronym>FLOSS</acronym>
(Free/Libre; and Open Source Software). In simple terms,
you can freely distribute copies of this software, read it's
source code, make changes to it, use pieces of it in new
free programs, and that you know you can do these things. FLOSS
is based on the concept of a community which shares knowledge.
This is one of the reasons why Python is so good - it has been
created and is constantly improved by a community who just want
to see a better Python.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Linguagem de Alto Nível <!--High-level Language--></term>
				<listitem>
					<para>
Quando você escreve programas em Python, não há necessidade de se preocupar com detalhes de baixo nível tais como manipular a memória utilizada pelo programa etc.

<!--When you write programs in Python, you never need to bother about
the low-level details such as managing the memory used by your
program, etc.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Portável<!--Portable--></term>
				<listitem>
					<para>
Por ser uma linguagem de código aberto, Python foi portada (ou seja, modificada para funcionar) em muitas plataformas. Todos os seus programas em Python podem rodar em qualquer uma destas plataformas sem precisar de mudanças, desde que você seja cuidadoso o suficiente para evitar usar características que dependam do sistema.
<!--					
Due to its open-source nature, Python has been ported (i.e. changed
to make it work on) to many platforms. All your Python programs can
work on any of these platforms without requiring any changes at all
if you are careful enough to avoid any system-dependent features.
-->					
					</para>
					<para>
Você pode usar Python em Linux, Windows, FreeBSD, Macintosh, Solaris, OS/2, Amiga, AROS, AS/$)), BeOS, OS/390, z/OS, Palm OS, QNX, VMS, Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE e até mesmo no PocketPC!

<!--You can use Python on Linux, Windows, FreeBSD, Macintosh, Solaris,
OS/2, Amiga, AROS, AS/400, BeOS, OS/390, z/OS, Palm OS, QNX, VMS,
Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE
and even PocketPC !-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Interpretada<!--Interpreted--></term>
				<listitem>
					<para>
Isto requer uma pequena explicação					
<!--	This requires a bit of explanation. -->
					
					</para>
					<para>
Um programa escrito em uma linguagem compilada como C ou C++ é convertido da linguagem de origem (C ou C++) para a linguagem que é falada por seu computador (código binário, ou seja, 0s e 1s) usando um compilador com vários flags e opções. Quando você roda o programa, o software linkeditor/carregador copia o programa do disco rígido para a memória e começa a executá-lo.

<!-- A program written in a compiled language like C or C++ is converted
from the source language i.e. C or C++ into a language that is
spoken by your computer (binary code i.e. 0s and 1s) using a compiler
with various flags and options. When you run the program, the
linker/loader software copies the program from hard disk to memory
and starts running it. -->
					
					</para>
					<para id="python-vm">
Python, por sua vez, não necessita de compilação para código binário. Você simplemente <emphasis>executa</emphasis> o programa diretamente do código-fonte. Internamente, Python converte o código-fonte em um formato intermediário chamado bytecode, o traduz para a linguagem nativa do seu computador e então o executa. Tudo isso, na verdade, torna Python muito mais fácil, uma vez que você não precisa se preocupar com a compilação do programa, certificar-se que as bibliotecas necessárias estão todas linkeditadas e carregadas etc, etc. Isto também torna seus programas em Python muito mais portáveis, já que você pode simplesmente copiar seu programa em Python em outro computador e e funciona!

<!--Python, on the other hand, does not need compilation to binary.
You just <emphasis>run</emphasis> the program directly from the source
code. Internally, Python converts the source code into an intermediate
form called bytecodes and then translates this into the native
language of your computer and then runs it. All this, actually, makes
using Python much easier since you don't have to worry about
compiling the program, making sure that the proper libraries are
linked and loaded, etc, etc. This also makes your Python programs
much more portable, since you can just copy your Python program onto
another computer and it just works!-->
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Orientada a Objetos<!--Object Oriented--></term>
				<listitem>
					<para>

Python suporta tanto programação procedural (estruturada) quanto orientada a objetos. Em linguagens <emphasis>procedurais</emphasis>, o programa é construído com base em procedimentos e funções, que nada mais são que trechos reutilizáveis de programas. Em linguagens <emphasis>orientadas a objeto</emphasis>, com base em objetos que combinam dados e funcionalidade. Python tem uma maneira simples mas poderosa de implementar programação orientada a objetos, especialmente quando comparada a linguagens como C++ ou Java.

<!--Python supports procedure-oriented programming as well as
object-oriented programming. In <emphasis>procedure-oriented</emphasis>
languages, the program is built around procedures or functions which
are nothing but reusable pieces of programs. In
<emphasis>object-oriented</emphasis> languages, the program is built
around objects which combine data and functionality. Python has a very
powerful but simplistic way of doing OOP, especially when compared to
big languages like C++ or Java.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Extensível<!--Extensible--></term>
				<listitem>
					<para>
Se você precisa que um trecho crítico de código seja executado com muita rapidez ou quer que parte de algum algoritmo não seja aberta, você pode codificá-los em C ou C++ e então usá-los a partir de seu programa Python.

<!-- If you need a critical piece of code to run very fast or want to
have some piece of algorithm not to be open, you can code that
part of your program in C or C++ and then use them from your
Python program. -->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Embarcável<!--Embeddable--></term>
				<listitem>
					<para>
Você pode embarcar Pyhton em seus programas C/C++ para fornecer funcionalidades de scripting aos usuário dos programas.

<!--You can embed Python within your C/C++ programs to give 'scripting'
capabilities for your program's users.-->
					
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Bibliotecas Extensivas<!--Extensive Libraries--></term>
				<listitem>
					<para>
A Biblioteca Padrão do Python (Python Standard Library) é de fato enorme. Ela pode ajudá-lo a fazer várias coisas envolvendo expressões regulares, geração de documentação, testes unitários, threading, acesso a bancos de dados, browsers web, CGi, FTP, e-mail, XML, XML-RPC, HTML, arquivos WAV, criptografia, GUI (Interfaces Gráficas com o Usuário), Tk e outras coisas dependentes do sistema. Lembre-se de que tudo isto está disponível onde quer que Python esteja instalado. Esta é a chamada filosofia das "Pilhas Incluídas" do Python.

<!--The Python Standard Library is huge indeed. It can help you do various
things involving regular expressions, documentation generation, unit
testing, threading, databases, web browsers, CGI, ftp, email, XML,
XML-RPC, HTML, WAV files, cryptography, GUI (graphical user interfaces),
Tk, and other system-dependent stuff. Remember, all this is always
available wherever Python is installed. This is called the 'Batteries
Included' philosophy of Python.-->
					
					</para>
					<para>
	Além da biblioteca padrão, existem várias outras bibliotecas de alta qualidade, tais comos <ulink url="http://www.wxpython.org">wxPython</ulink>,
<ulink url="http://www.twistedmatrix.com/products/twisted">Twisted</ulink>,
<ulink url="http://www.pythonware.com/products/pil/index.htm">Python Imaging
Library</ulink> e muitas outras.	

<!--Besides, the standard library, there are various other high-quality
libraries such as <ulink url="http://www.wxpython.org">wxPython</ulink>,
<ulink url="http://www.twistedmatrix.com/products/twisted">Twisted</ulink>,
<ulink url="http://www.pythonware.com/products/pil/index.htm">Python Imaging
Library</ulink> and many more.-->
					
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	
		<section id="introduction-summary">
			<title>Resumo<!--Summary--></title>
			
			<para>
Python é, de fato, uma linguagem poderosa e empolgante. Ela possui a combinação exata de desempenho e características que fazem escrever programas em Python uma tarefa fácil e divertida.

<!--Python is indeed an exciting and powerful language. It has the right combination of performance and features that make writing programs in Python both fun and easy.-->
			
			</para>
		</section>
	</section>
	
	<section id="why-not-perl">
		<title>Por que não Perl?<!--Why not Perl?--></title>
		
		<para>
Se você ainda não conhece, Perl é outra linguagem de programação interpretada e de código aberto extremamente popular.		
<!--If you didn't know already, Perl is another extremely popular open source interpreted programming language.-->
		
		</para>
		<para>
Se você alguma vez tentou escrever um programa grande em Perl, você poderia ter respondido essa pergunta sozinho! Em outras palavras, programas em Perl são fáceis quando eles são pequenos e são excelentes para pequenos "hacks" e scripts "pra fazer o serviço". No entanto, eles se tornam rapidamente difíceis de manter à medida em que se tornam maiores. E estou falando isso com base na minha experiência no Yahoo! escrevendo programas grandes em Perl.		

<!--If you have ever tried writing a large program in Perl, you would have answered this question yourself! In other words, Perl programs are easy when they are small and it excels at small hacks and scripts to 'get work done'. However, they quickly become unwieldy once you start writing bigger programs and I am speaking this out of experience of writing large Perl programs at Yahoo!-->
		
		</para>
		<para>
Quando comparados a Perl, os programas em Python são definitivamente mais simples, claros, fáceis de escrever e, consequentemente, mais legíveis e fáceis de manter. Eu admiro Perl e uso diariamente para várias tarefas, mas toda vez que escrevo um programa, começo a pensar em termos de Python, porque se tornou natural para mim. Perl passou por tantos hacks e mudanças que parece que a linguagem toda é um grande (mas ótimo) hack. Infelizmente, o futuro Perl 6 não parece trazer nenhuma melhoria quanto a isso.

<!--When compared to Perl, Python programs are definitely simpler, clearer, easier to write and hence more understandable and maintainable. I do admire Perl and I do use it on a daily basis for various things but whenever I write a program, I always start thinking in terms of Python because it has become so natural for me. Perl has undergone so many hacks and changes, that it feels like it is one big (but one hell of a) hack. Sadly, the upcoming Perl 6 does not seem to be making any improvements regarding this.-->
		
		</para>
		<para>
A única e bastante significativa vantagem do Perl, na minha opinião, é sua enorme biblioteca <ulink url="http://cpan.perl.org">CPAN</ulink> (Comprehensive Perl Archive Network). Como o nome sugere, é uma imensa coleção de módulos Perl e é simplesmente inacreditável, por causa de seu tamanho e profundidade - você pode fazer praticamente qualquer coisa que seja possível de se fazer com um computador usando estes módulos. Uma das razões pelas quais Perls tem mais bibliotecas que Python é o fato de existir há muito mais tempo. Talvez eu devesse sugerir uma maratona de portar-módulos-Perl-para-Python no <ulink url="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</ulink> :)

<!--The only and very significant advantage that I feel Perl has, is its huge
<ulink url="http://cpan.perl.org">CPAN</ulink> library - the Comprehensive Perl Archive
Network. As the name suggests, this is a humongous collection of Perl modules and it is
simply mind-boggling because of its sheer size and depth - you can do virtually anything
you can do with a computer using these modules. One of the reasons that Perl has more
libraries than Python is that it has been around for a much longer time than Python.
Maybe I should suggest a port-Perl-modules-to-Python hackathon on
<ulink url="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</ulink> :)-->
		
		</para>
		<para>
Além disso, a nova <ulink url="http://www.parrotcode.org">máquina virtual Parrot</ulink> é projetada para rodar tanto o completamente redesenhado Perl 6 quanto Python e outras linguagens interpretadas tais como Ruby, PHP e Tcl. O que isso significa é que <emphasis>talvez</emphasis>, no futuro, você seja capaz de utilizar todos os módulos do Perl a partir do Python, de modo a ter o melhor dos dois mundos: a poderosa biblioteca CPAN combinada com a poderosa linguagem Python. Entretanto, é preciso esperar para ver o que acontece.		

<!--Also, the new <ulink url="http://www.parrotcode.org">Parrot virtual machine</ulink> is
designed to run both the completely redesigned Perl 6 as well as Python and other interpreted
languages like Ruby, PHP and Tcl. What this means to you is that <emphasis>maybe</emphasis>
you will be able to use all Perl modules from Python in the future, so that will give you
the best of both worlds - the powerful CPAN library combined with the powerful Python
language. However, we will have to just wait and see what happens.-->
		
		</para>
	</section>
	
	<section id="what-programmers-say">
		<title>O Que os Programadores Dizem<!--What Programmers Say--></title>
		<para>
		É interessante ler o que grandes hackers como ESR têm a dizer sobre Python:
<!--		You may find it interesting to read what great hackers like ESR have to say about Python: -->
		
		</para>
		<itemizedlist>
			<listitem>
				<para>
				<emphasis role="bold">Eric S. Raymond</emphasis> é o autor de "A Catedral e o Bazar" e também é o indivíduo que cunhou o termo "Open Source". Ele diz que <ulink
				url="http://www.linuxjournal.com/article.php?sid=3882">Python se tornou minha linguagem de programação favorita</ulink>. Este artigo foi a real inspiração para meu primeiro contato com Python.

<!--	<emphasis role="bold">Eric S. Raymond</emphasis> is the author of
'The Cathedral and the Bazaar' and is also the person who coined the term
'Open Source'. He says that <ulink
url="http://www.linuxjournal.com/article.php?sid=3882">Python has become
his favorite programming language</ulink>. This article was the real
inspiration for my first brush with Python.-->
				
				</para>
			</listitem>
			<listitem>
				<para>
				<emphasis role="bold">Bruce Eckel</emphasis> é o autor dos famosos livros "Thinking in Java" e "Thinking in C++". Ele diz que nenhuma outra linguagem o deixou tão produtivo quanto Python. Diz ainda que Python é talvez a única linguagem que se concentra em tornar as coisas mais fáceis para o programador. Leia a <ulink url="http://www.artima.com/intv/aboutme.html">entrevista completa</ulink> para mais detalhes.
                                
<!--	<emphasis role="bold">Bruce Eckel</emphasis> is the author of the
famous 'Thinking in Java' and 'Thinking in C++' books. He says that no
language has made him more productive than Python. He says that Python
is perhaps the only language that focuses on making things easier for
the programmer. Read the <ulink
url="http://www.artima.com/intv/aboutme.html">complete interview</ulink>-
for more details.-->
				
				</para>
			</listitem>
			<listitem>
				<para>
				<emphasis role="bold">Peter Norvig</emphasis> é o conhecido autor do Lisp e Diretor de Qualidade de Busca no google (obrigado a Guido van Rossum por avisar). Ele diz que Python sempre foi parte integrante do Google. Esta afirmação pode ser comprovada verificando a página do <ulink url="http://www.google.com/jobs/index.html">Google Jobs</ulink> que lista conhecimento em Python como requisito para os engenheiros de software.
                                
<!--<emphasis role="bold">Peter Norvig</emphasis> is a well-known Lisp
author and Director of Search Quality at Google (thanks to Guido van
Rossum for pointing that out). He says that Python has always been an
integral part of Google. You can actually verify this statement by
looking at the <ulink url="http://www.google.com/jobs/index.html">
Google Jobs</ulink> page which lists Python knowledge as a requirement
for software engineers.-->
				
				</para>
			</listitem>
			<listitem>
				<para>
				<emphasis role="bold">Bruce Perens</emphasis> é co-fundador do OpenSource.org e do projeto UserLinux, que almeja criar uma distribuição Linux padronizada e suportada por múltiplos fornecedores. Python superou concorrentes como Perl e Ruby, tornando-se a principal linguagem de programação suportada pelo UserLinux.
                                
<!--<emphasis role="bold">Bruce Perens</emphasis> is a co-founder of
OpenSource.org and the UserLinux project. UserLinux aims to create a
standardized Linux distribution supported by multiple vendors. Python
has beaten contenders like Perl and Ruby to become the main programming
language that will be supported by UserLinux.-->
				
				</para>
			</listitem>
		</itemizedlist>
	</section>
</chapter>
