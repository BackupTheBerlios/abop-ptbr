<chapter id="control-flow">
	<title>Control Flow</title>
	
	<section id="control-flow-intro">
		<title>Introduction</title>
		
		<para>
		
		In the programs we have seen till now, there has always been a series of statements
		and Python faithfully executes them in the same order. What if you wanted to change the
		flow of how it works? For example, you want the program to take some decisions and do
		different things depending on different situations such as printing 'Good Morning' or
		'Good Evening' depending on the time of the day?
		
		</para>
		<para>
		
		As you might have guessed, this is achieved using control flow statements. There are three
		control flow statements in Python - <literal>if</literal>, <literal>for</literal> and
		<literal>while</literal>.
		
		</para>
	</section>
	<section id="if-statement">
		<title>The if statement</title>
		
		<para>
		
		The <literal>if</literal> statement is used to check a condition and <emphasis>if</emphasis>
		the condition is true, we run a block of statements (called the
		<emphasis>if-block</emphasis>), <emphasis>else</emphasis> we process another block of
		statements (called the <emphasis>else-block</emphasis>). The <emphasis>else</emphasis>
		clause is optional.
		
		</para>
		
		<section>
			<title>Using the if statement</title>
			
			<example id="using-if-statement">
				<title>Using the if statement</title>
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: if.py

number = 23
guess = int(raw_input('Enter an integer : '))

if guess == number:
	print 'Congratulations, you guessed it.' # New block starts here
	print "(but you do not win any prizes!)" # New block ends here
elif guess < number:
	print 'No, it is a little higher than that' # Another block
	# You can do whatever you want in a block ...
else:
	print 'No, it is a little lower than that'
	# you must have guess > number to reach here

print 'Done'
# This last statement is always executed, after the if statement is executed
				]]>
				</programlisting>
			</example>
			<section>
				<title>Output</title>
				<screen>
				<![CDATA[
$ python if.py
Enter an integer : 50
No, it is a little lower than that
Done
$ python if.py
Enter an integer : 22
No, it is a little higher than that
Done
$ python if.py
Enter an integer : 23
Congratulations, you guessed it.
(but you do not win any prizes!)
Done
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>How It Works</title>
			<para>
			
			In this program, we take guesses from the user and check if it is the number
			that we have. We set the variable <varname>number</varname> to any integer we
			want, say <literal>23</literal>. Then, we take the user's guess using the
			<literal>raw_input()</literal> function. Functions are just reusable pieces of
			programs. We'll read more about them in the <link linkend="functions">next
			chapter</link>.
			
			</para>
			<para>
			
			We supply a string to the built-in <function>raw_input</function> function
			which prints it to the screen and waits for input from the user. Once we enter
			something and press <keycap>enter</keycap>, the function returns the input
			which in the case of <function>raw_input</function> is a string. We then
			convert this string to an integer using <literal>int</literal> and then store
			it in the variable <varname>guess</varname>. Actually, the <literal>int</literal>
			is a class but all you need to know right now is that you can use it to convert
			a string to an integer (assuming the string contains a valid integer in the text).
			
			</para>
			<para>
			
			Next, we compare the guess of the user with the number we have chosen. If they
			are equal, we print a success message. Notice that we use indentation levels to
			tell Python which statements belong to which block. This is why indentation is
			so important in Python. I hope you are sticking to 'one tab per indentation level'
			rule. Are you?
			
			</para>
			<para>
			
			Notice how the <literal>if</literal> statement contains a colon at the end - we
			are indicating to Python that a block of statements follows.
			
			</para>
			<para>
			
			Then, we check if the guess is less than the number, and if so, we inform the user
			to guess a little higher than that. What we have used here is the
			<literal>elif</literal> clause which actually combines two related
			<literal>if else-if else</literal> statements into one combined
			<literal>if-elif-else</literal> statement. This makes the program easier and
			reduces the amount of indentation required.
			
			</para>
			<para>
			
			The <literal>elif</literal> and <literal>else</literal> statements must also have
			a colon at the end of the logical line followed by their corresponding block of
			statements (with proper indentation, of course)
			
			</para>
			<para>
			
			You can have another <literal>if</literal> statement inside the if-block of an
			<literal>if</literal> statement and so on - this is called a nested
			<literal>if</literal> statement.
			
			</para>
			<para>
			
			Remember that the <literal>elif</literal> and <literal>else</literal> parts are
			optional. A minival valid <literal>if</literal> statement is
			
			</para>
			<programlisting>
			<![CDATA[
if True:
	print 'Yes, it is true'
			]]>
			</programlisting>
			<para>
			
			After Python has finished executing the complete <literal>if</literal> statement
			along with the assocated <literal>elif</literal> and <literal>else</literal>
			clauses, it moves on to the next statement in the block containing the
			<literal>if</literal> statement. In this case, it is the main block where
			execution of the program starts and the next statement is the
			<literal>print 'Done'</literal> statement. After this, Python sees the ends of
			the program and simply finishes up.
			
			</para>
			<para>
			
			Although this is a very simple program, I have been pointing out a lot of things
			that you should notice even in this simple program. All these are pretty
			straightforward (and surprisingly simple for those of you from C/C++ backgrounds)
			and requires you to become aware of all these initially, but after that, you
			will become comfortable with it and it'll feel 'natural' to you.
			
			</para>
		</section>
		<note>
			<title>Note for C/C++ Programmers</title>
			<para>
			
			There is no <literal>switch</literal> statement in Python. You can use an
			<literal>if..elif..else</literal> statement to do the same thing (and in some
			cases, use a <link linkend="dictionary">dictionary</link> to do it quickly)
			
			</para>
		</note>
	</section>
	<section id="while-statement">
		<title>The while statement</title>
		
		<para>
		
		The <literal>while</literal> statement allows you to repeatedly execute a block of
		statements as long as a condition is true. A <literal>while</literal> statement is an
		example of what is called a <emphasis>looping</emphasis> statement. A
		<literal>while</literal> statement can have an optional <literal>else</literal> clause.
		
		</para>
		<section>
			<title>Using the while statement</title>
			<example id="using-while-statement">
				<title>Using the while statement</title>
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: while.py

number = 23
running = True

while running:
	guess = int(raw_input('Enter an integer : '))

	if guess == number:
		print 'Congratulations, you guessed it.'
		running = False # this causes the while loop to stop
	elif guess < number:
		print 'No, it is a little higher than that.'
	else:
		print 'No, it is a little lower than that.'
else:
	print 'The while loop is over.'
	# Do anything else you want to do here

print 'Done'
				]]>
				</programlisting>
			</example>
			<section>
				<title>Output</title>
				<screen>
				<![CDATA[
$ python while.py
Enter an integer : 50
No, it is a little lower than that.
Enter an integer : 22
No, it is a little higher than that.
Enter an integer : 23
Congratulations, you guessed it.
The while loop is over.
Done
				]]>
				</screen>
			</section>
			<section>
				<title>How It Works</title>
				
				<para>
				
				In this program, we are still playing the guessing game, but the advantage
				is that the user is allowed to keep guessing until he guesses correctly -
				there is no need to repeatedly execute the program for each guess as we
				have done previously. This aptly demonstrates the use of the
				<literal>while</literal> statement.
				
				</para>
				<para>
				
				We move the <literal>raw_input</literal> and <literal>if</literal>
				statements to inside the <literal>while</literal> loop and set the
				variable <varname>running</varname> to <literal>True</literal> before
				the while loop. First, we check if the variable <varname>running</varname>
				is <literal>True</literal> and then proceed to execute the corresponding
				<emphasis>while-block</emphasis>. After this block is executed, the
				condition is again checked which in this case is the <varname>running</varname>
				variable. If it is true, we execute the while-block again, else we continue
				to execute the optional else-block and then continue to the next statement.
				
				</para>
				<para>
				
				The <literal>else</literal> block is executed when the <literal>while</literal>
				loop condition becomes <literal>False</literal> - this may even be the first
				time that the condition is checked. If there is an <literal>else</literal>
				clause for a <literal>while</literal> loop, it is always executed unless you
				have a <literal>while</literal> loop which loops forever without ever breaking
				out!
				
				</para>
				<para>
				
				The <literal>True</literal> and <literal>False</literal> are called Boolean
				types and you can consider them to be equivalent to the value
				<literal>1</literal> and <literal>0</literal> respecitvely. It's important
				to use these where the condition or checking is important and not the actual
				value such as <literal>1</literal>.
				
				</para>
				<para>
				
				The else-block is actually redundant since you can put those statements
				in the same block (as the <literal>while</literal> statement) after the
				<literal>while</literal> statement to get the same effect.
				
				</para>
				<note>
					<title>Note for C/C++ Programmers</title>
					<para>
					
					Remember that you can have an <literal>else</literal> clause for
					the <literal>while</literal> loop.
					
					</para>
				</note>
			</section>
		</section>
	</section>
	<section id="for-loop">
		<title>The for loop</title>
		<para>
		
		The <literal>for..in</literal> statement is another looping statement which
		<emphasis>iterates</emphasis> over a sequence of objects i.e. go through each item
		in a sequence. We will see more about <link linkend="sequences">sequences</link> in
		detail in later chapters. What you need to know right now is that a sequence is just
		an ordered collection of items.
		
		</para>
		<section>
			<title>Using the for statement</title>
			
			<example id="using-for-statement">
				<title>Using the for statement</title>
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: for.py

for i in range(1, 5):
	print i
else:
	print 'The for loop is over'
				]]>
				</programlisting>
			</example>
			<section>
				<title>Output</title>
				<screen>
				<![CDATA[
$ python for.py
1
2
3
4
The for loop is over
				]]>
				</screen>
			</section>
			<section>
				<title>How It Works</title>
				<para>
				
				In this program, we are printing a <emphasis>sequence</emphasis> of
				numbers. We generate this sequence of numbers using hte built-in
				<function>range</function> function.
				
				</para>
				<para>
				
				What we do here is supply it two numbers and <function>range</function>
				returns a sequence of numbers starting from the first number and up to
				the second number. For example, <literal>range(1,5)</literal> gives the
				sequence <literal>[1, 2, 3, 4]</literal>. By default,
				<function>range</function> takes a step count of 1. If we supply a third
				number to <function>range</function>, then that becomes the step count.
				For example, <literal>range(1,5,2)</literal> gives
				<literal>[1,3]</literal>. Remember that the range extends
				<emphasis>up to</emphasis> the second number i.e. it does
				<emphasis role="bold">not</emphasis> include the second number.
				
				</para>
				<para>
				
				The <literal>for</literal> loop then iterates over this range -
				<literal>for i in range(1,5)</literal> is equivalent to
				<literal>for i in [1, 2, 3, 4]</literal> which is like assigning each
				number (or object) in the sequence to i, one at a time, and then
				executing the block of statements for each value of <varname>i</varname>.
				In this case, we just print the value in the block of statements.
				
				</para>
				<para>
				
				Remember that the <literal>else</literal> part is optional. When included,
				it is always executed once after the <literal>for</literal> loop is over
				unless a <link linkend="break-statement">break</link> statement is encountered.
				
				</para>
				<para>
				
				Remember that the <literal>for..in</literal> loop works for any sequence.
				Here, we have a list of numbers generated by the built-in
				<function>range</function> function, but in general we can use any kind
				of sequence of any kind of objects! We will explore this idea in detail
				in later chapters.
				
				</para>
				<note>
					<title>Note for C/C++/Java/C# Programmers</title>
					
					<para>
					
					The Python <literal>for</literal> loop is radically different from
					the C/C++ <literal>for</literal> loop. C# programmers will note that
					the <literal>for</literal> loop in Python is similar to the
					<literal>foreach</literal> loop in C#. Java programmers will note
					that the same is similar to <literal>for (int i : IntArray)</literal>
					in Java 1.5 .
					
					</para>
					<para>
					
					In C/C++, if you want to write
					<literal><![CDATA[for (int i = 0; i < 5; i++)]]></literal>, then in
					Python you write just <literal>for i in range(0,5)</literal>. As
					you can see, the <literal>for</literal> loop is simpler, more
					expressive and less error prone in Python.
					
					</para>
				</note>
			</section>
		</section>
	</section>
	<section id="break-statement">
		<title>The break statement</title>
		
		<para>
		
		The <literal>break</literal> statement is used to <emphasis>break</emphasis> out of a
		loop statement i.e. stop the execution of a looping statement, even if the loop condition
		has not become <literal>False</literal> or the sequence of items has been completely
		iterated over.
		
		</para>
		<para>
		
		An important note is that if you <emphasis>break</emphasis> out of a <literal>for</literal>
		or <literal>while</literal> loop, any corresponding loop <literal>else</literal> block is
		<emphasis role="bold">not</emphasis> executed.
		
		</para>
		<section>
			<title>Using the break statement</title>
			<example id="using-break-statement">
				<title>Using the break statement</title>
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: break.py

while True:
	s = raw_input('Enter something : ')
	if s == 'quit':
		break
	print 'Length of the string is', len(s)
print 'Done'
				]]>
				</programlisting>
			</example>
			<section>
				<title>Output</title>
				<screen>
				<![CDATA[
$ python break.py
Enter something : Programming is fun
Length of the string is 18
Enter something : When the work is done
Length of the string is 21
Enter something : if you wanna make your work also fun:
Length of the string is 37
Enter something :       use Python!
Length of the string is 12
Enter something : quit
Done
				]]>
				</screen>
			</section>
			<section>
				<title>How It Works</title>
				
				<para>
				
				In this program, we repeatedly take the user's input and print the length
				of each input each time. We are providing a special condition to stop
				the program by checking if the user input is <literal>'quit'</literal>.
				We stop the program by <emphasis>break</emphasis>ing out of the loop
				and reach the end of the program.
				
				</para>
				<para>
				
				The length of the input string can be found out using the built-in
				<function>len</function> function.
				
				</para>
				<para>
				
				Remember that the <literal>break</literal> statement can be used with
				the <literal>for</literal> loop as well.
				
				</para>
			</section>
			<section>
				<title>G2's Poetic Python</title>
				<para>
				
				The input I have used here is a mini poem I have written called
				<emphasis role="bold">G2's Poetic Python</emphasis>:
				
				</para>
				<screen>
Programming is fun
When the work is done
if you wanna make your work also fun:
	use Python!
				</screen>
			</section>
		</section>
	</section>
	<section id="continue-statement">
		<title>The continue statement</title>
		
		<para>
		
		The <literal>continue</literal> statement is used to tell Python to skip the rest of the
		statements in the current loop block and to <emphasis>continue</emphasis> to the next
		iteration of the loop.
		
		</para>
		<section>
			<title>Using the continue statement</title>
			<example id="using-continue-statement">
				<title>Using the continue statement</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: continue.py

while True:
	s = raw_input('Enter something : ')
	if s == 'quit':
		break
	if len(s) < 3:
		continue
	print 'Input is of sufficient length'
	# Do other kinds of processing here...
				]]>
				</programlisting>
			</example>
			<section>
				<title>Output</title>
				<screen>
				<![CDATA[
$ python continue.py
Enter something : a
Enter something : 12
Enter something : abc
Input is of sufficient length
Enter something : quit
				]]>
				</screen>
			</section>
			<section>
				<title>How It Works</title>
				
				<para>
				
				In this program, we accept input from the user, but we process them only
				if they are at least 3 characters long. So, we use the built-in
				<function>len</function> function to get the length and if the length
				is less than 3, we skip the rest of the statements in the block by using
				the <literal>continue</literal> statement. Otherwise, the rest of the
				statements in the loop are executed and we can do any kind of processing
				we want to do here.
				
				</para>
				<para>
				
				Note that the <literal>continue</literal> statement works with the
				<literal>for</literal> loop as well.
				
				</para>
			</section>
		</section>
	</section>
	<section id="control-flow-summary">
		<title>Summary</title>
		
		<para>
		
		We have seen how to use the three control flow statements - <literal>if</literal>,
		<literal>while</literal> and <literal>for</literal> along with their associated
		<literal>break</literal> and <literal>continue</literal> statements. These are some of the
		most often used parts of Python and hence, becoming comfortable with them is essential.
		
		</para>
		<para>
		
		Next, we will see how to create and use functions.
		
		</para>
	</section>
</chapter>
