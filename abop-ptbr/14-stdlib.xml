<chapter id="stdlib">
	<title>The Python Standard Library</title>
	
	<section id="stdlib-intro">
		<title>Introduction</title>
		
		<para>
		
		The Python Standard Library is available with every Python installation. It contains a
		huge number of very useful modules. It is important that you become familiar with the
		Python Standard Library since most of your problems can be solved more easily and quickly
		if you are familiar with this library of modules.
		
		</para>
		<para>
		
		We will explore some of the commonly used modules in this library. You can find complete
		details for all of the modules in the Python Standard Library in the 'Library
		Reference' section in the documentation that comes with your Python installation.
		
		</para>
	</section>
	
	<section id="sys-module">
		<title>The sys module</title>
		
		<para>
		
		The <literal>sys</literal> module contains system-specific functionality. we have already
		seen that the <varname>sys.argv</varname> list contains the command-line arguments.
		
		</para>

<!-- 		TODO: Change this example to something which exposes more of sys module functionality -->
		<section id="command-line-arguments">
			<title>Command Line Arguments</title>
			
			<example>
				<title>Using sys.argv</title>
				
				<programlisting>
				<![CDATA[
#!/usr/bin/python
# Filename: cat.py

import sys

def readfile(filename):
	'''Print a file to the standard output.'''
	f = file(filename)
	while True:
		line = f.readline()
		if len(line) == 0:
			break
		print line, # notice comma
	f.close()

# Script starts from here
if len(sys.argv) < 2:
	print 'No action specified.'
	sys.exit()

if sys.argv[1].startswith('--'):
	option = sys.argv[1][2:]
	# fetch sys.argv[1] but without the first two characters
	if option == 'version':
		print 'Version 1.2'
	elif option == 'help':
		print '''\
This program prints files to the standard output.
Any number of files can be specified.
Options include:
  --version : Prints the version number
  --help    : Display this help'''
	else:
		print 'Unknown option.'
	sys.exit()
else:
	for filename in sys.argv[1:]:
		readfile(filename)
				]]>
				</programlisting>
			</example>
			
			<section>
				<title>Output</title>
				
				<screen>
				<![CDATA[
$ python cat.py
No action specified.

$ python cat.py --help
This program prints files to the standard output.
Any number of files can be specified.
Options include:
  --version : Prints the version number
  --help    : Display this help

$ python cat.py --version
Version 1.2

$ python cat.py --nonsense
Unknown option.

$ python cat.py poem.txt
Programming is fun
When the work is done
if you wanna make your work also fun:
        use Python!
				]]>
				</screen>
			</section>
			
			<section>
				<title>How It Works</title>
				
				<para>
				
				This program tries to mimic the <command>cat</command> command familiar to
				Linux/Unix users. You just speicfy the names of some text files and it will
				print them to the output.
				
				</para>
				<para>
				
				When a Python program is run i.e. not an interactive mode, there is always
				at least one item in the <varname>sys.argv</varname> list which is the name
				of the current program being run and is available as 
				<literal>sys.argv[0]</literal> since Python starts counting from 0. Other
				command line arguments follow this item.
				
				</para>
				<para>
				
				To make the program user-friendly we have supplied certain options that the
				user can specify to learn more about the program. We use the first argument
				to check if any options have been specified to our program. If the
				<literal>--version</literal> option is used, the version number of the program
				is printed. Similarly, when the <literal>--help</literal> option is specified,
				we give a bit of explanation about the program. We make use of the
				<function>sys.exit</function> function to exit the running program. As always,
				see <literal>help(sys.exit)</literal> for more details.
				
				</para>
				<para>
				
				When no options are specified and filenames are passed to the program, it
				simply prints out each line of each file, one after the other in the order
				specified on the command line.
				
				</para>
				<para>
				
				As an aside, the name <command>cat</command> is short for
				<emphasis>concatenate</emphasis> which is basically what this program does
				- it can print out a file or attach/concatenate two or more files together
				in the output.
				
				</para>
			</section>
		</section>
		<section id="more-sys">
			<title>More sys</title>
			
			<para>
			
			The <varname>sys.version</varname> string gives you information about the version
			of Python that you have installed. The <varname>sys.version_info</varname> tuple
			gives an easier way of enabling Python-version specific parts of your program.
			
			</para>
			<screen>
			<![CDATA[
[swaroop@localhost code]$ python
>>> import sys
>>> sys.version
'2.3.4 (#1, Oct 26 2004, 16:42:40) \n[GCC 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)]'
>>> sys.version_info
(2, 3, 4, 'final', 0)
			]]>
			</screen>
			<para>
			
			For experienced programmers, other items of interest in the <literal>sys</literal>
			module include <varname>sys.stdin</varname>, <varname>sys.stdout</varname> and
			<varname>sys.stderr</varname> which correspond to the standard input, standard
			output and standard error streams of your program respectively.
			
			</para>
		</section>
	</section>
	
	<section id="os-module">
		<title>The os module</title>
		
		<para>
		
		This module represents generic <emphasis role="bold">o</emphasis>perating
		<emphasis role="bold">s</emphasis>ystem functionality. This module is especially important
		if you want to make your programs platform-independent i.e. it allows the program to be
		written such that it will run on Linux as well as Windows without any problems and without
		requiring changes. An example of this is using the <varname>os.sep</varname> variable
		instead of the operation system-specific path separator.
		
		</para>
		<para>
		
		Some of the more useful parts of the <literal>os</literal> module are listed below
		Most of them are self-explanatory.
		
		</para>
		
		<itemizedlist>
			<listitem>
				<para>
				
				The <varname>os.name</varname> string specifies which platform you are using,
				such as <literal>'nt'</literal> for Windows and <literal>'posix'</literal>
				for Linux/Unix users.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.getcwd()</function> function gets the current working
				directory i.e. the path of the directory from which the curent Python
				script is working.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.getenv()</function> and <function>os.putenv()</function>
				functions are used to get and set environment variables respectively.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.listdir()</function> function returns the name of all
				files and directories in the specified directory.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.remove()</function> function is used to delete a file.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.system()</function> function is used to run a shell
				command.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <varname>os.linesep</varname> string gives the line terminator used
				in the current platform. For example, Windows uses <literal>'\r\n'</literal>,
				Linux uses <literal>'\n'</literal> and Mac uses <literal>'\r'</literal>.
				
				</para>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.path.split()</function> function returns the directory
				name and file name of the path.
				
				</para>
				<screen>
				<![CDATA[
>>> os.path.split('/home/swaroop/byte/code/poem.txt')
('/home/swaroop/byte/code', 'poem.txt')
				]]>
				</screen>
			</listitem>
			<listitem>
				<para>
				
				The <function>os.path.isfile()</function> and the
				<function>os.path.isdir()</function> functions check if the given path
				refers to a file or directory respectively. Similarly, the
				<function>os.path.exists()</function> function is used to check if a
				given path actually exists.
				
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
		
		You can explore the Python Standard Documentation for more details on these functions and
		variables. You can use <literal>help(sys)</literal>, etc. as well.
		
		</para>
	</section>
	
	<section id="stdlib-summary">
		<title>Summary</title>
		
		<para>
		
		We have seen some of the functionality of the <literal>sys</literal> module and
		<literal>sys</literal> modules in the Python Standard Library. You should explore the
		Python Standard Documentation to find out more about these and other modules as well.
		
		</para>
		<para>
		
		Next, we will cover various aspects of Python that will make our tour of Python more
		<emphasis>complete</emphasis>.
		
		</para>
	</section>
</chapter>